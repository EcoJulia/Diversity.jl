{
    "docs": [
        {
            "location": "/", 
            "text": "Diversity.jl\n\n\nThe main \nDiversity\n package provides basic numbers-equivalent diversity measures (described in \nHill, 1973\n), similarity-sensitive diversity measures (generalised from Hill, and described in \nLeinster and Cobbold, 2012\n), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in \nReeve et al, 2014\n). The diversity functions exist both with unicode names (e.g. \n\u1fb1()\n), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. \nNormalisedAlpha()\n), which are. We also provide functions to calculate appropriate \nsubdiv()\n and \nmetadiv()\n values for each measure, a general \ndiversity()\n function for extract any diversity measure at a series of scales.\n\n\nAccessing the main functionality in the package is simple:\n\n\njulia\n \n# Load the package into R\n\n       \nusing\n \nDiversity\n\n\n\njulia\n \n# Example population\n\n       \npop\n \n=\n \n[\n1\n \n1\n \n0\n;\n \n2\n \n0\n \n0\n;\n \n3\n \n1\n \n4\n];\n\n\n\njulia\n \npop\n \n=\n \npop\n \n/\n \nsum\n(\npop\n);\n\n\n\njulia\n \n# Create Metacommunity object\n\n       \nmeta\n \n=\n \nMetacommunity\n(\npop\n);\n\n\n\njulia\n \ndiversities\n \n=\n \nnorm_meta_alpha\n(\nmeta\n,\n \n[\n0\n,\n \n1\n,\n \n2\n,\n \nInf\n])\n\n\n4\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure           \u2502 q   \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nNormalisedAlpha\n \u2502 0.0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 2   \u2502 \nNormalisedAlpha\n \u2502 1.0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 3   \u2502 \nNormalisedAlpha\n \u2502 2.0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 4   \u2502 \nNormalisedAlpha\n \u2502 Inf \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n             \u2502 2.16667   \u2502\n\n\n\u2502 2   \u2502 \n             \u2502 1.86121   \u2502\n\n\n\u2502 3   \u2502 \n             \u2502 1.63636   \u2502\n\n\n\u2502 4   \u2502 \n             \u2502 1.0       \u2502\n\n\n\njulia\n \nZ\n \n=\n \n[\n1.0\n \n0\n \n0\n;\n \n0\n \n1\n \n1\n;\n \n1\n \n1\n \n1\n];\n\n\n\njulia\n \nmeta_z\n \n=\n \nMetacommunity\n(\npop\n,\n \nZ\n);\n\n\n\njulia\n \nrho\n \n=\n \nRawRho\n(\nmeta_z\n);\n\n\n\njulia\n \nredundancies\n \n=\n \nsubdiv\n(\nrho\n,\n \n2\n)\n\n\n3\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure  \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nRawRho\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\u2502 2   \u2502 \nRawRho\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\u2502 3   \u2502 \nRawRho\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n1\n            \u2502 2.0       \u2502\n\n\n\u2502 2   \u2502 \n2\n            \u2502 3.0       \u2502\n\n\n\u2502 3   \u2502 \n3\n            \u2502 3.0       \u2502\n\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity\n \n \nModule\n.\n\n\nThe main \nDiversity\n module provides basic numbers-equivalent diversity measures (described in \nHill, 1973\n), similarity-sensitive diversity measures (generalised from Hill, and described in \nLeinster and Cobbold, 2012\n), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in \nReeve et al, 2014\n). The diversity functions exist both with unicode names (e.g. \n\u1fb1()\n), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. \nNormalisedAlpha()\n), which are. We also provide functions to calculate appropriate \nsubcommunityDiversity()\n and \nmetacommunityDiversity()\n values for each measure, a general \ndiversity()\n function for extract any diversity measure at a series of scales.\n\n\nsource\n\n\n#\n\n\nDiversity.individualDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate individual diversities\n\n\nGenerates the function to calculate individual diversities for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the individual diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.metacommunityDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate metacommunity diversity\n\n\nGenerates the function to calculate metacommunity diversity for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the metacommunity diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.subcommunityDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate subcommunity diversity\n\n\nGenerates the function to calculate subcommunity diversity for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the subcommunity diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.AbstractMetacommunity\n \n \nType\n.\n\n\nAbstractMetacommunity{FP, A, Sim, Part}\n\n\n\n\n\nAbstractMetacommunity is the abstract supertype of all metacommunity types. AbstractMetacommunity subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities), and how to assess similarity between individuals within it.\n\n\nsource\n\n\n#\n\n\nDiversity.AbstractPartition\n \n \nType\n.\n\n\nAbstractPartition\n\n\n\n\n\nAbstract supertype for all partitioning types. AbstractPartition subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities).\n\n\nsource\n\n\n#\n\n\nDiversity.AbstractTypes\n \n \nType\n.\n\n\nAbstractTypes\n\n\n\n\n\nAbstract supertype for all similarity types. Its subtypes allow you to define how similarity is measured between individuals.\n\n\nsource\n\n\n#\n\n\nDiversity.DiversityLevel\n \n \nType\n.\n\n\nEnumeration of levels that can exist / be calculated for a metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.DiversityMeasure\n \n \nType\n.\n\n\nDiversityMeasure\n\n\n\n\n\nThis type is the abstract supertype of all diversity measure types. DiversityMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.Gamma\n \n \nType\n.\n\n\nGamma\n\n\n\n\n\nCalculates gamma diversity (\u03b3) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.GeneralTypes\n \n \nType\n.\n\n\nGeneralTypes{FP, M}\n\n\n\n\n\nAn AbstractTypes subtype with a general similarity matrix. This subtype simply holds a matrix with similarities between individuals.\n\n\nMembers:\n\n\n\n\nz\n A two-dimensional matrix representing similarity between\n\n\n\n\nindividuals.\n\n\nsource\n\n\n#\n\n\nDiversity.Metacommunity\n \n \nType\n.\n\n\nMetacommunity{FP, A, Part, Sim}\n\n\n\n\n\nMetacommunity type, representing a whole metacommunity containing a single community or a collection of subcommunities. The metacommunity of individuals \nmay\n be further partitioned into smaller groups. For instance this may be an ecosystem, which consists of a series of subcommunities. The AbstractPartition subtype within it stores relative abundances of different types, e.g. species, and also allows for similarity between individuals.\n\n\nConstructor:\n\n\nMetacommunity(abundances::AbstractArray, part::AbstractPartition, types::AbstractTypes)\n\n\nMembers:\n\n\n\n\nabundances\n the abundance matrix for the metacommunity.\n\n\npartition\n the instance of the AbstractPartition subtype, containing the subcommunities.\n\n\ntypes\n The instance of the AbstractTypes subtype, from which similarities between individuals can be calculated.\n\n\nordinariness\n A cache of the ordinariness of the individuals in the Partition. Should only be accessed through getordinariness!(::Metacommunity), which will populate the cache if it has not yet been calculated.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.NormalisedAlpha\n \n \nType\n.\n\n\nNormalisedAlpha\n\n\n\n\n\nCalculates normalised alpha diversity (\u03b1\u0304) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.NormalisedBeta\n \n \nType\n.\n\n\nNormalisedBeta\n\n\n\n\n\nCalculates normalised beta diversity (\u03b2\u0304) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.NormalisedRho\n \n \nType\n.\n\n\nNormalisedRho\n\n\n\n\n\nCalculates redundancy (\u03c1\u0304, normalised beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Onecommunity\n \n \nType\n.\n\n\nOnecommunity\n\n\n\n\n\nAbstractPartition subtype containing only one subcommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.PowerMeanMeasure\n \n \nType\n.\n\n\nPowerMeanMeasure\n\n\n\n\n\nThis abstract DiversityMeasure subtype is the supertype of all diversity measures which are straight power means. PowerMeanMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.RawAlpha\n \n \nType\n.\n\n\nRawAlpha\n\n\n\n\n\nCalculates raw alpha diversity (\u03b1) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.RawBeta\n \n \nType\n.\n\n\nRawBeta\n\n\n\n\n\nCalculates distinctiveness (\u03b2, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.RawRho\n \n \nType\n.\n\n\nRawRho\n\n\n\n\n\nCalculates redundancy (\u03c1, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\n\nConstructor arguments:\n\n\n\n\nmeta\n: a Metacommunity\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.RelativeEntropyMeasure\n \n \nType\n.\n\n\nRelativeEntropyMeasure\n\n\n\n\n\nThis abstract DiversityMeasure subtype is the supertype of all diversity measures which are relative entropy-based diversity measures. RelativeEntropyMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.Species\n \n \nType\n.\n\n\nSpecies\n\n\n\n\n\nA subtype of AbstractTypes where all species are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all species as unique and completely distinct from each other.\n\n\nsource\n\n\n#\n\n\nDiversity.Subcommunities\n \n \nType\n.\n\n\nSubcommunities(num)\n\n\n\n\n\nAbstractPartition subtype with multiple subcommunities.\n\n\nsource\n\n\n#\n\n\nDiversity.Taxonomy\n \n \nType\n.\n\n\nTaxonomy\n\n\n\n\n\nA subtype of AbstractTypes with similarity between related taxa, creating taxonomic similarity matrices.\n\n\nsource\n\n\n#\n\n\nDiversity.UniqueTypes\n \n \nType\n.\n\n\nUniqueTypes\n\n\n\n\n\nA subtype of AbstractTypes where all individuals are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all individuals as unique and completely distinct from each other.\n\n\nsource\n\n\n#\n\n\nDiversity.countsubcommunities\n \n \nFunction\n.\n\n\ncountsubcommunities(p::AbstractPartition)\n\n\n\n\n\nReturns number of subcommunities in a partition, p.\n\n\nsource\n\n\n#\n\n\nDiversity.counttypes\n \n \nFunction\n.\n\n\ncounttypes(t::AbstractTypes)\n\n\n\n\n\nReturns number of types in an AbstractTypes object, t.\n\n\nsource\n\n\n#\n\n\nDiversity.diversity\n \n \nMethod\n.\n\n\nCalculates subcommunity and metacommunity diversities\n\n\nCalculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.\n\n\nArguments:\n\n\n\n\ndls\n: an iterable collection of DiversityLevels\n\n\ndms\n: an iterable collection of DiversityMeasures\n\n\nmeta\n: a Metacommunity\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\nReturns:\n\n\nA vector containing all of the diversity levels of all of the requested diversities.\n\n\nsource\n\n\n#\n\n\nDiversity.getASCIIName\n \n \nMethod\n.\n\n\ngetASCIIName(dm::DiversityMeasure)\n\n\n\n\n\nReturn the ASCII name of the DiversityMeasure\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing simple ASCII name of DiversityMeasure\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getFullName\n \n \nFunction\n.\n\n\ngetFullName(dm::DiversityMeasure)\n\n\n\n\n\nReturn the full name of the DiversityMeasure.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing full descriptive name of DiversityMeasure\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getName\n \n \nFunction\n.\n\n\ngetName(dm::DiversityMeasure)\n\n\n\n\n\nReturn the character corresponding to the DiversityMeasure.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing unicode (greek) name of DiversityMeasure.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getabundance\n \n \nFunction\n.\n\n\ngetabundance(::AbstractMetacommunity)\n\n\n\n\n\nReturns the abundances array of the metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.getmetaordinariness!\n \n \nFunction\n.\n\n\ngetmetaordinariness!(::AbstractMetacommunity)\n\n\n\n\n\nReturns (and possibly calculates) the ordinariness of the metacommunity as a whole.\n\n\nsource\n\n\n#\n\n\nDiversity.getnames\n \n \nFunction\n.\n\n\ngetnames(arg)\n\n\n\n\n\nReturns the names of the subcommunities of the AbstractPartition or the names of the types of the AbstractTypes.\n\n\nsource\n\n\n#\n\n\nDiversity.getordinariness\n \n \nFunction\n.\n\n\ngetordinariness(t::AbstractTypes, a::AbstractArray)\n\n\n\n\n\nCalculates the ordinariness of abundance a from AbstractTypes, t\n\n\nsource\n\n\n#\n\n\nDiversity.getordinariness!\n \n \nFunction\n.\n\n\ngetordinariness!(::AbstractMetacommunity)\n\n\n\n\n\nReturns (and possibly calculates) the ordinariness array of the subcommunities.\n\n\nsource\n\n\n#\n\n\nDiversity.getpartition\n \n \nFunction\n.\n\n\ngetpartition(::AbstractMetacommunity)\n\n\n\n\n\nReturns the AbstractPartition component of the metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.getscnames\n \n \nMethod\n.\n\n\ngetscnames(dm::DiversityMeasure)\n\n\n\n\n\nReturn the names of the subcommunities of the metacommunity being analysed\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nVector of Strings of names of subcommunities.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getsimilarity\n \n \nFunction\n.\n\n\ngetsimilarity(t::AbstractTypes)\n\n\n\n\n\nRetrieves (and possibly calculates) a similarity matrix from p\n\n\nsource\n\n\n#\n\n\nDiversity.gettypenames\n \n \nMethod\n.\n\n\ngettypenames(dm::DiversityMeasure)\n\n\n\n\n\nReturn the names of the types of the metacommunity being analysed\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nVector of Strings of names of types.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.gettypes\n \n \nFunction\n.\n\n\ngettypes(::AbstractMetacommunity)\n\n\n\n\n\nReturns the AbstractTypes component of the metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.getweight\n \n \nMethod\n.\n\n\ngetweight(::AbstractMetacommunity)\n\n\n\n\n\nRetrieves (and possibly calculates) the relative weights of the subcommunities.\n\n\nsource\n\n\n#\n\n\nDiversity.inddiv\n \n \nFunction\n.\n\n\ninddiv(measure::DiversityMeasure, q::Real)\ninddiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\n\n\n\n\nTakes a diversity measure and single order or vector of orders, and returns a DataFrame containing the individual diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n / \nqs\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns individual diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.metadiv\n \n \nFunction\n.\n\n\nmetadiv(measure::DiversityMeasure, q::Real)\nmetadiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\n\n\n\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the metacommunity diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n / \nqs\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns metacommunity diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.qD\n \n \nFunction\n.\n\n\nqD\n\n\n\n\n\nCalculates Hill / naive-similarity diversity of order(s) \nqs\n of a population with given relative proportions.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different types in population\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.qDZ\n \n \nFunction\n.\n\n\nqDZ\n\n\n\n\n\nCalculates Leinster-Cobbold / similarity-sensitive diversity of \n= 1 order(s) \nqs\n of a population with given relative \nproportions\n, and similarity matrix \nZ\n.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different types in a population\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.subdiv\n \n \nFunction\n.\n\n\nsubdiv(measure::DiversityMeasure, q::Real)\nsubdiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\n\n\n\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the subcommunity diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n / \nqs\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns subcommunity diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.AbstractMetacommunity\n\n\nDiversity.AbstractPartition\n\n\nDiversity.AbstractTypes\n\n\nDiversity.DiversityLevel\n\n\nDiversity.DiversityMeasure\n\n\nDiversity.Gamma\n\n\nDiversity.GeneralTypes\n\n\nDiversity.Metacommunity\n\n\nDiversity.NormalisedAlpha\n\n\nDiversity.NormalisedBeta\n\n\nDiversity.NormalisedRho\n\n\nDiversity.Onecommunity\n\n\nDiversity.PowerMeanMeasure\n\n\nDiversity.RawAlpha\n\n\nDiversity.RawBeta\n\n\nDiversity.RawRho\n\n\nDiversity.RelativeEntropyMeasure\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.UniqueTypes\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.countsubcommunities\n\n\nDiversity.counttypes\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getnames\n\n\nDiversity.getordinariness\n\n\nDiversity.getordinariness!\n\n\nDiversity.getpartition\n\n\nDiversity.getscnames\n\n\nDiversity.getsimilarity\n\n\nDiversity.gettypenames\n\n\nDiversity.gettypes\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Introduction"
        }, 
        {
            "location": "/#diversityjl", 
            "text": "The main  Diversity  package provides basic numbers-equivalent diversity measures (described in  Hill, 1973 ), similarity-sensitive diversity measures (generalised from Hill, and described in  Leinster and Cobbold, 2012 ), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in  Reeve et al, 2014 ). The diversity functions exist both with unicode names (e.g.  \u1fb1() ), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g.  NormalisedAlpha() ), which are. We also provide functions to calculate appropriate  subdiv()  and  metadiv()  values for each measure, a general  diversity()  function for extract any diversity measure at a series of scales.  Accessing the main functionality in the package is simple:  julia   # Load the package into R \n        using   Diversity  julia   # Example population \n        pop   =   [ 1   1   0 ;   2   0   0 ;   3   1   4 ];  julia   pop   =   pop   /   sum ( pop );  julia   # Create Metacommunity object \n        meta   =   Metacommunity ( pop );  julia   diversities   =   norm_meta_alpha ( meta ,   [ 0 ,   1 ,   2 ,   Inf ])  4\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure           \u2502 q   \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  NormalisedAlpha  \u2502 0.0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 2   \u2502  NormalisedAlpha  \u2502 1.0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 3   \u2502  NormalisedAlpha  \u2502 2.0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 4   \u2502  NormalisedAlpha  \u2502 Inf \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502               \u2502 2.16667   \u2502  \u2502 2   \u2502               \u2502 1.86121   \u2502  \u2502 3   \u2502               \u2502 1.63636   \u2502  \u2502 4   \u2502               \u2502 1.0       \u2502  julia   Z   =   [ 1.0   0   0 ;   0   1   1 ;   1   1   1 ];  julia   meta_z   =   Metacommunity ( pop ,   Z );  julia   rho   =   RawRho ( meta_z );  julia   redundancies   =   subdiv ( rho ,   2 )  3\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure  \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  RawRho  \u2502 2 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 2   \u2502  RawRho  \u2502 2 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 3   \u2502  RawRho  \u2502 2 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  1             \u2502 2.0       \u2502  \u2502 2   \u2502  2             \u2502 3.0       \u2502  \u2502 3   \u2502  3             \u2502 3.0       \u2502    Diversity.jl   #  Diversity     Module .  The main  Diversity  module provides basic numbers-equivalent diversity measures (described in  Hill, 1973 ), similarity-sensitive diversity measures (generalised from Hill, and described in  Leinster and Cobbold, 2012 ), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in  Reeve et al, 2014 ). The diversity functions exist both with unicode names (e.g.  \u1fb1() ), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g.  NormalisedAlpha() ), which are. We also provide functions to calculate appropriate  subcommunityDiversity()  and  metacommunityDiversity()  values for each measure, a general  diversity()  function for extract any diversity measure at a series of scales.  source  #  Diversity.individualDiversity     Constant .  Generates the function to calculate individual diversities  Generates the function to calculate individual diversities for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the individual diversities for those values.   source  #  Diversity.metacommunityDiversity     Constant .  Generates the function to calculate metacommunity diversity  Generates the function to calculate metacommunity diversity for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the metacommunity diversities for those values.   source  #  Diversity.subcommunityDiversity     Constant .  Generates the function to calculate subcommunity diversity  Generates the function to calculate subcommunity diversity for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the subcommunity diversities for those values.   source  #  Diversity.AbstractMetacommunity     Type .  AbstractMetacommunity{FP, A, Sim, Part}  AbstractMetacommunity is the abstract supertype of all metacommunity types. AbstractMetacommunity subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities), and how to assess similarity between individuals within it.  source  #  Diversity.AbstractPartition     Type .  AbstractPartition  Abstract supertype for all partitioning types. AbstractPartition subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities).  source  #  Diversity.AbstractTypes     Type .  AbstractTypes  Abstract supertype for all similarity types. Its subtypes allow you to define how similarity is measured between individuals.  source  #  Diversity.DiversityLevel     Type .  Enumeration of levels that can exist / be calculated for a metacommunity.  source  #  Diversity.DiversityMeasure     Type .  DiversityMeasure  This type is the abstract supertype of all diversity measure types. DiversityMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.  source  #  Diversity.Gamma     Type .  Gamma  Calculates gamma diversity (\u03b3) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.GeneralTypes     Type .  GeneralTypes{FP, M}  An AbstractTypes subtype with a general similarity matrix. This subtype simply holds a matrix with similarities between individuals.  Members:   z  A two-dimensional matrix representing similarity between   individuals.  source  #  Diversity.Metacommunity     Type .  Metacommunity{FP, A, Part, Sim}  Metacommunity type, representing a whole metacommunity containing a single community or a collection of subcommunities. The metacommunity of individuals  may  be further partitioned into smaller groups. For instance this may be an ecosystem, which consists of a series of subcommunities. The AbstractPartition subtype within it stores relative abundances of different types, e.g. species, and also allows for similarity between individuals.  Constructor:  Metacommunity(abundances::AbstractArray, part::AbstractPartition, types::AbstractTypes)  Members:   abundances  the abundance matrix for the metacommunity.  partition  the instance of the AbstractPartition subtype, containing the subcommunities.  types  The instance of the AbstractTypes subtype, from which similarities between individuals can be calculated.  ordinariness  A cache of the ordinariness of the individuals in the Partition. Should only be accessed through getordinariness!(::Metacommunity), which will populate the cache if it has not yet been calculated.   source  #  Diversity.NormalisedAlpha     Type .  NormalisedAlpha  Calculates normalised alpha diversity (\u03b1\u0304) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.NormalisedBeta     Type .  NormalisedBeta  Calculates normalised beta diversity (\u03b2\u0304) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.NormalisedRho     Type .  NormalisedRho  Calculates redundancy (\u03c1\u0304, normalised beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.Onecommunity     Type .  Onecommunity  AbstractPartition subtype containing only one subcommunity.  source  #  Diversity.PowerMeanMeasure     Type .  PowerMeanMeasure  This abstract DiversityMeasure subtype is the supertype of all diversity measures which are straight power means. PowerMeanMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.  source  #  Diversity.RawAlpha     Type .  RawAlpha  Calculates raw alpha diversity (\u03b1) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.RawBeta     Type .  RawBeta  Calculates distinctiveness (\u03b2, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.RawRho     Type .  RawRho  Calculates redundancy (\u03c1, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.  Constructor arguments:   meta : a Metacommunity   source  #  Diversity.RelativeEntropyMeasure     Type .  RelativeEntropyMeasure  This abstract DiversityMeasure subtype is the supertype of all diversity measures which are relative entropy-based diversity measures. RelativeEntropyMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.  source  #  Diversity.Species     Type .  Species  A subtype of AbstractTypes where all species are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all species as unique and completely distinct from each other.  source  #  Diversity.Subcommunities     Type .  Subcommunities(num)  AbstractPartition subtype with multiple subcommunities.  source  #  Diversity.Taxonomy     Type .  Taxonomy  A subtype of AbstractTypes with similarity between related taxa, creating taxonomic similarity matrices.  source  #  Diversity.UniqueTypes     Type .  UniqueTypes  A subtype of AbstractTypes where all individuals are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all individuals as unique and completely distinct from each other.  source  #  Diversity.countsubcommunities     Function .  countsubcommunities(p::AbstractPartition)  Returns number of subcommunities in a partition, p.  source  #  Diversity.counttypes     Function .  counttypes(t::AbstractTypes)  Returns number of types in an AbstractTypes object, t.  source  #  Diversity.diversity     Method .  Calculates subcommunity and metacommunity diversities  Calculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.  Arguments:   dls : an iterable collection of DiversityLevels  dms : an iterable collection of DiversityMeasures  meta : a Metacommunity  qs : single number or vector of values of parameter q   Returns:  A vector containing all of the diversity levels of all of the requested diversities.  source  #  Diversity.getASCIIName     Method .  getASCIIName(dm::DiversityMeasure)  Return the ASCII name of the DiversityMeasure  Arguments:   dm : DiversityMeasure   Returns:   String containing simple ASCII name of DiversityMeasure   source  #  Diversity.getFullName     Function .  getFullName(dm::DiversityMeasure)  Return the full name of the DiversityMeasure.  Arguments:   dm : DiversityMeasure   Returns:   String containing full descriptive name of DiversityMeasure   source  #  Diversity.getName     Function .  getName(dm::DiversityMeasure)  Return the character corresponding to the DiversityMeasure.  Arguments:   dm : DiversityMeasure   Returns:   String containing unicode (greek) name of DiversityMeasure.   source  #  Diversity.getabundance     Function .  getabundance(::AbstractMetacommunity)  Returns the abundances array of the metacommunity.  source  #  Diversity.getmetaordinariness!     Function .  getmetaordinariness!(::AbstractMetacommunity)  Returns (and possibly calculates) the ordinariness of the metacommunity as a whole.  source  #  Diversity.getnames     Function .  getnames(arg)  Returns the names of the subcommunities of the AbstractPartition or the names of the types of the AbstractTypes.  source  #  Diversity.getordinariness     Function .  getordinariness(t::AbstractTypes, a::AbstractArray)  Calculates the ordinariness of abundance a from AbstractTypes, t  source  #  Diversity.getordinariness!     Function .  getordinariness!(::AbstractMetacommunity)  Returns (and possibly calculates) the ordinariness array of the subcommunities.  source  #  Diversity.getpartition     Function .  getpartition(::AbstractMetacommunity)  Returns the AbstractPartition component of the metacommunity.  source  #  Diversity.getscnames     Method .  getscnames(dm::DiversityMeasure)  Return the names of the subcommunities of the metacommunity being analysed  Arguments:   dm : DiversityMeasure   Returns:   Vector of Strings of names of subcommunities.   source  #  Diversity.getsimilarity     Function .  getsimilarity(t::AbstractTypes)  Retrieves (and possibly calculates) a similarity matrix from p  source  #  Diversity.gettypenames     Method .  gettypenames(dm::DiversityMeasure)  Return the names of the types of the metacommunity being analysed  Arguments:   dm : DiversityMeasure   Returns:   Vector of Strings of names of types.   source  #  Diversity.gettypes     Function .  gettypes(::AbstractMetacommunity)  Returns the AbstractTypes component of the metacommunity.  source  #  Diversity.getweight     Method .  getweight(::AbstractMetacommunity)  Retrieves (and possibly calculates) the relative weights of the subcommunities.  source  #  Diversity.inddiv     Function .  inddiv(measure::DiversityMeasure, q::Real)\ninddiv(measure::DiversityMeasure, qs::AbstractVector{Real})  Takes a diversity measure and single order or vector of orders, and returns a DataFrame containing the individual diversities for those values.  Arguments:   dm : DiversityMeasure  q  /  qs : a single order or a vector of orders   Returns:   Returns individual diversities of  dm  for a single order  q  or a vector of order  qs .   source  #  Diversity.metadiv     Function .  metadiv(measure::DiversityMeasure, q::Real)\nmetadiv(measure::DiversityMeasure, qs::AbstractVector{Real})  Takes a diversity measure and single order or vector of orders, and calculates and returns the metacommunity diversities for those values.  Arguments:   dm : DiversityMeasure  q  /  qs : a single order or a vector of orders   Returns:   Returns metacommunity diversities of  dm  for a single order  q  or a vector of order  qs .   source  #  Diversity.qD     Function .  qD  Calculates Hill / naive-similarity diversity of order(s)  qs  of a population with given relative proportions.  Arguments:   proportions : relative proportions of different types in population  qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source  #  Diversity.qDZ     Function .  qDZ  Calculates Leinster-Cobbold / similarity-sensitive diversity of  = 1 order(s)  qs  of a population with given relative  proportions , and similarity matrix  Z .  Arguments:   proportions : relative proportions of different types in a population  qs : single number or vector of orders of diversity measurement  Z : similarity matrix   Returns:   Diversity of order qs (single number or vector of diversities)   source  #  Diversity.subdiv     Function .  subdiv(measure::DiversityMeasure, q::Real)\nsubdiv(measure::DiversityMeasure, qs::AbstractVector{Real})  Takes a diversity measure and single order or vector of orders, and calculates and returns the subcommunity diversities for those values.  Arguments:   dm : DiversityMeasure  q  /  qs : a single order or a vector of orders   Returns:   Returns subcommunity diversities of  dm  for a single order  q  or a vector of order  qs .   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.AbstractMetacommunity  Diversity.AbstractPartition  Diversity.AbstractTypes  Diversity.DiversityLevel  Diversity.DiversityMeasure  Diversity.Gamma  Diversity.GeneralTypes  Diversity.Metacommunity  Diversity.NormalisedAlpha  Diversity.NormalisedBeta  Diversity.NormalisedRho  Diversity.Onecommunity  Diversity.PowerMeanMeasure  Diversity.RawAlpha  Diversity.RawBeta  Diversity.RawRho  Diversity.RelativeEntropyMeasure  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.UniqueTypes  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.countsubcommunities  Diversity.counttypes  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getnames  Diversity.getordinariness  Diversity.getordinariness!  Diversity.getpartition  Diversity.getscnames  Diversity.getsimilarity  Diversity.gettypenames  Diversity.gettypes  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Diversity.jl"
        }, 
        {
            "location": "/ecology/", 
            "text": "In the \nDiversity.Ecology\n package, we replicate old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and ecosystem measures. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).\n\n\n\n\nUsage\n\n\nAccessing the functionality in the package is simple:\n\n\njulia\n \nusing\n \nDiversity\n.\nEcology\n\n\n\njulia\n \ncommunity\n \n=\n \n[\n10\n,\n \n20\n,\n \n20\n];\n\n\n\njulia\n \ncommunity\n \n/=\n \nsum\n(\ncommunity\n);\n\n\n\njulia\n \ndiversity\n \n=\n \nsimpson\n(\ncommunity\n)\n\n\n1\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nSimpson\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n1\n            \u2502 0.36      \u2502\n\n\n\njulia\n \necosystem\n \n=\n \n[\n2\n \n2\n \n0.\n;\n \n0\n \n2\n \n2\n]\n;\n\n\n\njulia\n \necosystem\n \n/=\n \nsum\n(\necosystem\n);\n\n\n\njulia\n \njaccard\n(\necosystem\n)\n\n\n1\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nJaccard\n \u2502 0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n             \u2502 0.333333  \u2502\n\n\n\njulia\n \ngeneralisedjaccard\n(\necosystem\n,\n \n[\n0\n,\n \n1\n,\n \n2\n])\n\n\n3\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nJaccard\n \u2502 0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 2   \u2502 \nJaccard\n \u2502 1 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 3   \u2502 \nJaccard\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n             \u2502 0.333333  \u2502\n\n\n\u2502 2   \u2502 \n             \u2502 0.414214  \u2502\n\n\n\u2502 3   \u2502 \n             \u2502 0.5       \u2502\n\n\n\njulia\n \ngeneralisedjaccard\n(\necosystem\n,\n \n[\n0\n,\n \n1\n,\n \n2\n],\n \neye\n(\n3\n))\n\n\n3\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nJaccard\n \u2502 0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 2   \u2502 \nJaccard\n \u2502 1 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 3   \u2502 \nJaccard\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n             \u2502 0.333333  \u2502\n\n\n\u2502 2   \u2502 \n             \u2502 0.414214  \u2502\n\n\n\u2502 3   \u2502 \n             \u2502 0.5       \u2502\n\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Ecology\n \n \nModule\n.\n\n\nThe \nDiversity.Ecology\n module replicates old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and metacommunity levels. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedjaccard\n \n \nFunction\n.\n\n\ngeneralisedjaccard(proportions::AbstractArray, qs, Z::AbstractMatrix)\n\n\n\n\n\nCalculates a generalisation of the Jaccard index of two columns representing the counts of two subcommunities. This evaluates to raw alpha / gamma - 1 for a series of orders, repesented as a vector of qs (or a single number). It also includes an optional similarity matrix for the species. This gives a measure of the distinctness of the subcommunities, though we believe that beta and normalised beta have better properties.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nJaccard-related distinctivess measures\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedrichness\n \n \nFunction\n.\n\n\ngeneralisedrichness(level::DiversityLevel, proportions::AbstractArray, Z::AbstractMatrix)\n\n\n\n\n\nCalculates species richness (diversity at q = 0) of a series of columns representing subcommunity counts, allowing a similarity matrix for the types / species.\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\ndiversity (at ecosystem level) or diversities (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedshannon\n \n \nFunction\n.\n\n\ngeneralisedshannon(level::DiversityLevel, proportions::AbstractArray, Z::AbstractMatrix)\n\n\n\n\n\nCalculates Shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nentropy (at metacommunity level) or entropies (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedsimpson\n \n \nFunction\n.\n\n\nCalculate a generalised version of Simpson's index\n\n\nCalculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nconcentration (at ecosystem level) or concentrations (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.jaccard\n \n \nMethod\n.\n\n\njaccard(proportions::AbstractMatrix)\n\n\n\n\n\nCalculates Jaccard index (Jaccard similarity coefficient) of two columns representing independent subcommunity counts, which is normmetaalpha(proportions, 0) / metagamma(proportions, 0) - 1\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nthe Jaccard index\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.richness\n \n \nMethod\n.\n\n\nrichness(proportions::AbstractMatrix)\n\n\n\n\n\nCalculates species richness (diversity at q = 0) of a series of columns representing independent subcommunity counts.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\ndiversities of subcommunities\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.shannon\n \n \nMethod\n.\n\n\nCalculate Shannon entropy of populations\n\n\nCalculates shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nentropies of subcommunities\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.simpson\n \n \nMethod\n.\n\n\nsimpson(proportions::AbstractMatrix)\n\n\n\n\n\nCalculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nconcentrations of subcommunities\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.AbstractMetacommunity\n\n\nDiversity.AbstractPartition\n\n\nDiversity.AbstractTypes\n\n\nDiversity.DiversityLevel\n\n\nDiversity.DiversityMeasure\n\n\nDiversity.Gamma\n\n\nDiversity.GeneralTypes\n\n\nDiversity.Metacommunity\n\n\nDiversity.NormalisedAlpha\n\n\nDiversity.NormalisedBeta\n\n\nDiversity.NormalisedRho\n\n\nDiversity.Onecommunity\n\n\nDiversity.PowerMeanMeasure\n\n\nDiversity.RawAlpha\n\n\nDiversity.RawBeta\n\n\nDiversity.RawRho\n\n\nDiversity.RelativeEntropyMeasure\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.UniqueTypes\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.countsubcommunities\n\n\nDiversity.counttypes\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getnames\n\n\nDiversity.getordinariness\n\n\nDiversity.getordinariness!\n\n\nDiversity.getpartition\n\n\nDiversity.getscnames\n\n\nDiversity.getsimilarity\n\n\nDiversity.gettypenames\n\n\nDiversity.gettypes\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Ecology"
        }, 
        {
            "location": "/ecology/#usage", 
            "text": "Accessing the functionality in the package is simple:  julia   using   Diversity . Ecology  julia   community   =   [ 10 ,   20 ,   20 ];  julia   community   /=   sum ( community );  julia   diversity   =   simpson ( community )  1\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  Simpson  \u2502 2 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  1             \u2502 0.36      \u2502  julia   ecosystem   =   [ 2   2   0. ;   0   2   2 ] ;  julia   ecosystem   /=   sum ( ecosystem );  julia   jaccard ( ecosystem )  1\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  Jaccard  \u2502 0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502               \u2502 0.333333  \u2502  julia   generalisedjaccard ( ecosystem ,   [ 0 ,   1 ,   2 ])  3\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  Jaccard  \u2502 0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 2   \u2502  Jaccard  \u2502 1 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 3   \u2502  Jaccard  \u2502 2 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502               \u2502 0.333333  \u2502  \u2502 2   \u2502               \u2502 0.414214  \u2502  \u2502 3   \u2502               \u2502 0.5       \u2502  julia   generalisedjaccard ( ecosystem ,   [ 0 ,   1 ,   2 ],   eye ( 3 ))  3\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure   \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  Jaccard  \u2502 0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 2   \u2502  Jaccard  \u2502 1 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 3   \u2502  Jaccard  \u2502 2 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502               \u2502 0.333333  \u2502  \u2502 2   \u2502               \u2502 0.414214  \u2502  \u2502 3   \u2502               \u2502 0.5       \u2502    Diversity.jl   #  Diversity.Ecology     Module .  The  Diversity.Ecology  module replicates old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and metacommunity levels. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).  source  #  Diversity.Ecology.generalisedjaccard     Function .  generalisedjaccard(proportions::AbstractArray, qs, Z::AbstractMatrix)  Calculates a generalisation of the Jaccard index of two columns representing the counts of two subcommunities. This evaluates to raw alpha / gamma - 1 for a series of orders, repesented as a vector of qs (or a single number). It also includes an optional similarity matrix for the species. This gives a measure of the distinctness of the subcommunities, though we believe that beta and normalised beta have better properties.  Arguments:   proportions : population proportions  qs : single number or vector of values of parameter q  Z : similarity matrix   Returns:   Jaccard-related distinctivess measures   source  #  Diversity.Ecology.generalisedrichness     Function .  generalisedrichness(level::DiversityLevel, proportions::AbstractArray, Z::AbstractMatrix)  Calculates species richness (diversity at q = 0) of a series of columns representing subcommunity counts, allowing a similarity matrix for the types / species.  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  proportions : population proportions  Z : similarity matrix   Returns:   diversity (at ecosystem level) or diversities (of subcommunities)   source  #  Diversity.Ecology.generalisedshannon     Function .  generalisedshannon(level::DiversityLevel, proportions::AbstractArray, Z::AbstractMatrix)  Calculates Shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  proportions : population proportions  Z : similarity matrix   Returns:   entropy (at metacommunity level) or entropies (of subcommunities)   source  #  Diversity.Ecology.generalisedsimpson     Function .  Calculate a generalised version of Simpson's index  Calculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  proportions : population proportions  Z : similarity matrix   Returns:   concentration (at ecosystem level) or concentrations (of subcommunities)   source  #  Diversity.Ecology.jaccard     Method .  jaccard(proportions::AbstractMatrix)  Calculates Jaccard index (Jaccard similarity coefficient) of two columns representing independent subcommunity counts, which is normmetaalpha(proportions, 0) / metagamma(proportions, 0) - 1  Arguments:   proportions : population proportions   Returns:   the Jaccard index   source  #  Diversity.Ecology.richness     Method .  richness(proportions::AbstractMatrix)  Calculates species richness (diversity at q = 0) of a series of columns representing independent subcommunity counts.  Arguments:   proportions : population proportions   Returns:   diversities of subcommunities   source  #  Diversity.Ecology.shannon     Method .  Calculate Shannon entropy of populations  Calculates shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts.  Arguments:   proportions : population proportions   Returns:   entropies of subcommunities   source  #  Diversity.Ecology.simpson     Method .  simpson(proportions::AbstractMatrix)  Calculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts.  Arguments:   proportions : population proportions   Returns:   concentrations of subcommunities   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.AbstractMetacommunity  Diversity.AbstractPartition  Diversity.AbstractTypes  Diversity.DiversityLevel  Diversity.DiversityMeasure  Diversity.Gamma  Diversity.GeneralTypes  Diversity.Metacommunity  Diversity.NormalisedAlpha  Diversity.NormalisedBeta  Diversity.NormalisedRho  Diversity.Onecommunity  Diversity.PowerMeanMeasure  Diversity.RawAlpha  Diversity.RawBeta  Diversity.RawRho  Diversity.RelativeEntropyMeasure  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.UniqueTypes  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.countsubcommunities  Diversity.counttypes  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getnames  Diversity.getordinariness  Diversity.getordinariness!  Diversity.getpartition  Diversity.getscnames  Diversity.getsimilarity  Diversity.gettypenames  Diversity.gettypes  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }, 
        {
            "location": "/hill/", 
            "text": "Hill numbers\n are found in the \nDiversity.Hill\n package.\n\n\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\njulia\n \nusing\n \nDiversity\n.\nHill\n\n\n\njulia\n \ncommunity\n \n=\n \n[\n10\n,\n \n20\n,\n \n20\n,\n \n0\n,\n \n3\n];\n\n\n\njulia\n \ncommunity\n \n/=\n \nsum\n(\ncommunity\n);\n\n\n\njulia\n \ndiversities\n \n=\n \nhillnumber\n(\ncommunity\n,\n \n[\n0\n,\n \n1\n,\n \n2\n])\n\n\n3\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure      \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nHillNumber\n \u2502 0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\u2502 2   \u2502 \nHillNumber\n \u2502 1 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\u2502 3   \u2502 \nHillNumber\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nsubcommunity\n  \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n1\n            \u2502 4.0       \u2502\n\n\n\u2502 2   \u2502 \n1\n            \u2502 3.36264   \u2502\n\n\n\u2502 3   \u2502 \n1\n            \u2502 3.09021   \u2502\n\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Hill\n \n \nModule\n.\n\n\nHill numbers\n are found in the \nDiversity.Hill\n package.\n\n\nsource\n\n\n#\n\n\nDiversity.Hill.hillnumber\n \n \nMethod\n.\n\n\nhillnumber(proportions, qs)\n\n\n\n\n\nCalculate the Hill number (or naive diversity) of order q of population(s) with given relative proportions\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals / species                in population (vector, or matrix where columns are                individual populations)\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.AbstractMetacommunity\n\n\nDiversity.AbstractPartition\n\n\nDiversity.AbstractTypes\n\n\nDiversity.DiversityLevel\n\n\nDiversity.DiversityMeasure\n\n\nDiversity.Gamma\n\n\nDiversity.GeneralTypes\n\n\nDiversity.Metacommunity\n\n\nDiversity.NormalisedAlpha\n\n\nDiversity.NormalisedBeta\n\n\nDiversity.NormalisedRho\n\n\nDiversity.Onecommunity\n\n\nDiversity.PowerMeanMeasure\n\n\nDiversity.RawAlpha\n\n\nDiversity.RawBeta\n\n\nDiversity.RawRho\n\n\nDiversity.RelativeEntropyMeasure\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.UniqueTypes\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.countsubcommunities\n\n\nDiversity.counttypes\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getnames\n\n\nDiversity.getordinariness\n\n\nDiversity.getordinariness!\n\n\nDiversity.getpartition\n\n\nDiversity.getscnames\n\n\nDiversity.getsimilarity\n\n\nDiversity.gettypenames\n\n\nDiversity.gettypes\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Hill"
        }, 
        {
            "location": "/hill/#usage", 
            "text": "Accessing the main functionality in the package is simple:  julia   using   Diversity . Hill  julia   community   =   [ 10 ,   20 ,   20 ,   0 ,   3 ];  julia   community   /=   sum ( community );  julia   diversities   =   hillnumber ( community ,   [ 0 ,   1 ,   2 ])  3\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure      \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  HillNumber  \u2502 0 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 2   \u2502  HillNumber  \u2502 1 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 3   \u2502  HillNumber  \u2502 2 \u2502  types     \u2502          \u2502  subcommunity   \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  1             \u2502 4.0       \u2502  \u2502 2   \u2502  1             \u2502 3.36264   \u2502  \u2502 3   \u2502  1             \u2502 3.09021   \u2502    Diversity.jl   #  Diversity.Hill     Module .  Hill numbers  are found in the  Diversity.Hill  package.  source  #  Diversity.Hill.hillnumber     Method .  hillnumber(proportions, qs)  Calculate the Hill number (or naive diversity) of order q of population(s) with given relative proportions  Arguments:   proportions : relative proportions of different individuals / species                in population (vector, or matrix where columns are                individual populations)  qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.AbstractMetacommunity  Diversity.AbstractPartition  Diversity.AbstractTypes  Diversity.DiversityLevel  Diversity.DiversityMeasure  Diversity.Gamma  Diversity.GeneralTypes  Diversity.Metacommunity  Diversity.NormalisedAlpha  Diversity.NormalisedBeta  Diversity.NormalisedRho  Diversity.Onecommunity  Diversity.PowerMeanMeasure  Diversity.RawAlpha  Diversity.RawBeta  Diversity.RawRho  Diversity.RelativeEntropyMeasure  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.UniqueTypes  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.countsubcommunities  Diversity.counttypes  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getnames  Diversity.getordinariness  Diversity.getordinariness!  Diversity.getpartition  Diversity.getscnames  Diversity.getsimilarity  Diversity.gettypenames  Diversity.gettypes  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }, 
        {
            "location": "/jost/", 
            "text": "Lou Jost's \ndiversity\n \nmeasures\n are found in the \nDiversity.Jost\n package.\n\n\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\njulia\n \nusing\n \nDiversity\n.\nJost\n\n\n\njulia\n \necosystem\n \n=\n \n[\n2\n \n2\n \n0\n;\n \n0\n \n2\n \n2\n]\n;\n\n\n\njulia\n \necosystem\n \n/=\n \nsum\n(\necosystem\n);\n\n\n\njulia\n \ndiversities\n \n=\n \njostbeta\n(\necosystem\n,\n \n[\n0\n,\n \n1\n,\n \n2\n])\n\n\n3\u00d77 DataFrames.DataFrame\n\n\n\u2502 Row \u2502 measure    \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \nJostBeta\n \u2502 0 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 2   \u2502 \nJostBeta\n \u2502 1 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\u2502 3   \u2502 \nJostBeta\n \u2502 2 \u2502 \ntypes\n    \u2502 \n        \u2502 \nmetacommunity\n \u2502\n\n\n\n\u2502 Row \u2502 partition_name \u2502 diversity \u2502\n\n\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\n\n\u2502 1   \u2502 \n             \u2502 1.5       \u2502\n\n\n\u2502 2   \u2502 \n             \u2502 1.41421   \u2502\n\n\n\u2502 3   \u2502 \n             \u2502 1.33333   \u2502\n\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Jost\n \n \nModule\n.\n\n\nLou Jost's \ndiversity\n \nmeasures\n are found in the \nDiversity.Jost\n module.\n\n\nsource\n\n\n#\n\n\nDiversity.Jost.jostalpha\n \n \nMethod\n.\n\n\njostalpha(proportions::AbstractMatrix, qs)\n\n\n\n\n\nCalculates Jost's alpha diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive-community ecosystem diversity divided by the naive-community beta diversity.\n\n\nArguments:\n\n\n\n\nproportions\n relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDataFrame of diversities\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Jost.jostbeta\n \n \nMethod\n.\n\n\njostbeta(proportions::AbstractMatrix, qs)\n\n\n\n\n\nCalculates Jost's beta diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive gamma diversity divided by Jost's alpha diversity\n\n\nArguments:\n\n\n\n\nproportions\n relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDataFrame of diversities\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.AbstractMetacommunity\n\n\nDiversity.AbstractPartition\n\n\nDiversity.AbstractTypes\n\n\nDiversity.DiversityLevel\n\n\nDiversity.DiversityMeasure\n\n\nDiversity.Gamma\n\n\nDiversity.GeneralTypes\n\n\nDiversity.Metacommunity\n\n\nDiversity.NormalisedAlpha\n\n\nDiversity.NormalisedBeta\n\n\nDiversity.NormalisedRho\n\n\nDiversity.Onecommunity\n\n\nDiversity.PowerMeanMeasure\n\n\nDiversity.RawAlpha\n\n\nDiversity.RawBeta\n\n\nDiversity.RawRho\n\n\nDiversity.RelativeEntropyMeasure\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.UniqueTypes\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.countsubcommunities\n\n\nDiversity.counttypes\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getnames\n\n\nDiversity.getordinariness\n\n\nDiversity.getordinariness!\n\n\nDiversity.getpartition\n\n\nDiversity.getscnames\n\n\nDiversity.getsimilarity\n\n\nDiversity.gettypenames\n\n\nDiversity.gettypes\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Jost"
        }, 
        {
            "location": "/jost/#usage", 
            "text": "Accessing the main functionality in the package is simple:  julia   using   Diversity . Jost  julia   ecosystem   =   [ 2   2   0 ;   0   2   2 ] ;  julia   ecosystem   /=   sum ( ecosystem );  julia   diversities   =   jostbeta ( ecosystem ,   [ 0 ,   1 ,   2 ])  3\u00d77 DataFrames.DataFrame  \u2502 Row \u2502 measure    \u2502 q \u2502 type_level \u2502 type_name \u2502 partition_level \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502  JostBeta  \u2502 0 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 2   \u2502  JostBeta  \u2502 1 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 3   \u2502  JostBeta  \u2502 2 \u2502  types     \u2502          \u2502  metacommunity  \u2502  \u2502 Row \u2502 partition_name \u2502 diversity \u2502  \u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524  \u2502 1   \u2502               \u2502 1.5       \u2502  \u2502 2   \u2502               \u2502 1.41421   \u2502  \u2502 3   \u2502               \u2502 1.33333   \u2502    Diversity.jl   #  Diversity.Jost     Module .  Lou Jost's  diversity   measures  are found in the  Diversity.Jost  module.  source  #  Diversity.Jost.jostalpha     Method .  jostalpha(proportions::AbstractMatrix, qs)  Calculates Jost's alpha diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive-community ecosystem diversity divided by the naive-community beta diversity.  Arguments:   proportions  relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)  qs  single number or vector of orders of diversity measurement   Returns:   DataFrame of diversities   source  #  Diversity.Jost.jostbeta     Method .  jostbeta(proportions::AbstractMatrix, qs)  Calculates Jost's beta diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive gamma diversity divided by Jost's alpha diversity  Arguments:   proportions  relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)  qs  single number or vector of orders of diversity measurement   Returns:   DataFrame of diversities   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.AbstractMetacommunity  Diversity.AbstractPartition  Diversity.AbstractTypes  Diversity.DiversityLevel  Diversity.DiversityMeasure  Diversity.Gamma  Diversity.GeneralTypes  Diversity.Metacommunity  Diversity.NormalisedAlpha  Diversity.NormalisedBeta  Diversity.NormalisedRho  Diversity.Onecommunity  Diversity.PowerMeanMeasure  Diversity.RawAlpha  Diversity.RawBeta  Diversity.RawRho  Diversity.RelativeEntropyMeasure  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.UniqueTypes  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.countsubcommunities  Diversity.counttypes  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getnames  Diversity.getordinariness  Diversity.getordinariness!  Diversity.getpartition  Diversity.getscnames  Diversity.getsimilarity  Diversity.gettypenames  Diversity.gettypes  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }
    ]
}