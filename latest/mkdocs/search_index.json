{
    "docs": [
        {
            "location": "/", 
            "text": "Diversity.jl\n\n\nThe main \nDiversity\n package provides basic numbers-equivalent diversity measures (described in \nHill, 1973\n), similarity-sensitive diversity measures (generalised from Hill, and described in \nLeinster and Cobbold, 2012\n), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in \nReeve et al, 2014\n). The diversity functions exist both with unicode names (e.g. \n\u1fb1()\n), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. \nNormalisedAlpha()\n), which are. We also provide functions to calculate appropriate \nsubcommunityDiversity()\n and \nmetacommunityDiversity()\n values for each measure, a general \ndiversity()\n function for extract any diversity measure at a series of scales.\n\n\nAccessing the main functionality in the package is simple:\n\n\nusing Diversity\n...\ndiversities = metacommunityDiversity(NormalisedAlpha(Metacommunity(proportions, Z)), [0, 1, 2, Inf])\ndiversity = metacommunityDiversity(RawRho(Metacommunity(proportions, Z)), 2)\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity\n \n \nModule\n.\n\n\nThe main \nDiversity\n module provides basic numbers-equivalent diversity measures (described in \nHill, 1973\n), similarity-sensitive diversity measures (generalised from Hill, and described in \nLeinster and Cobbold, 2012\n), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in \nReeve et al, 2014\n). The diversity functions exist both with unicode names (e.g. \n\u1fb1()\n), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. \nNormalisedAlpha()\n), which are. We also provide functions to calculate appropriate \nsubcommunityDiversity()\n and \nmetacommunityDiversity()\n values for each measure, a general \ndiversity()\n function for extract any diversity measure at a series of scales.\n\n\nsource\n\n\n#\n\n\nDiversity.individualDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate individual diversities\n\n\nGenerates the function to calculate individual diversities for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the individual diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.metacommunityDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate metacommunity diversity\n\n\nGenerates the function to calculate metacommunity diversity for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the metacommunity diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.subcommunityDiversity\n \n \nConstant\n.\n\n\nGenerates the function to calculate subcommunity diversity\n\n\nGenerates the function to calculate subcommunity diversity for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nFunction which takes a single number or vector of values of parameter q, and returns the subcommunity diversities for those values.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.DiversityLevel\n \n \nType\n.\n\n\nEnumeration of levels that can exist / be calculated for a metacommunity.\n\n\nsource\n\n\n#\n\n\nDiversity.MatrixSimilarity\n \n \nType\n.\n\n\nA general matrix-based AbstractSimilarity subtype\n\n\nThis subtype of AbstractSimilarity simply holds a matrix with similarities between individuals.\n\n\nMembers:\n\n\n\n\nzMatrix\n A two-dimensional matrix representing similarity between   individuals.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.MatrixSimilarity\n \n \nMethod\n.\n\n\nConstructor for MatrixSimilarity\n\n\nCreates an instance of the MatrixSimilarity class, with an arbitrary similarity matrix.\n\n\nArguments:\n\n\n\n\nz\n: similarity matrix\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Metacommunity\n \n \nType\n.\n\n\nSingle subcommunity contructor for Metacommunity\n\n\nsource\n\n\n#\n\n\nDiversity.Metacommunity\n \n \nType\n.\n\n\nMultiple subcommunity constructors for Metacommunity\n\n\nsource\n\n\n#\n\n\nDiversity.Metacommunity\n \n \nType\n.\n\n\nMetacommunity type, representing a collection of individuals\n\n\nType representing a whole metacommunity containing a single community or a collection of subcommunities. The metacommunity of individuals \nmay\n be further partitioned into smaller groups. For instance this may be an ecosystem, which consists of a series of subcommunities. The AbstractPartition subtype within it stores relative abundances of different types, e.g. species, and also allows for similarity between individuals.\n\n\nConstructor:\n\n\nMetacommunity(part::AbstractPartition, sim::AbstractSimilarity)\n\n\n\n\npart\n is an instance of type Part, the partition type, e.g. Subcommunities, a subtype of AbstractPartition.\n\n\nsim\n is an instance of type Sim, the similarity type, e.g. Species, a subtype of AbstractSimilarity.\n\n\n\n\nMembers:\n\n\n\n\npartition\n the instance of the AbstractPartition subtype, containing the subcommunities. These should be accessed through getabundance(::Metacommunity).\n\n\nsimilarity\n The instance of the AbstractSimilarity subtype, from which similarities between individuals can be calculated.\n\n\nordinariness\n A cache of the ordinariness of the individuals in the Partition. Should only be accessed through getordinariness!(::Metacommunity), which will populate the cache if it has not yet been calculated.\n\n\nFPType\n is the kind of number storage, a subtype of AbstractFloat.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Metacommunity\n \n \nMethod\n.\n\n\nConstructor for Metacommunity with a similarity matrix\n\n\nsource\n\n\n#\n\n\nDiversity.Onecommunity\n \n \nType\n.\n\n\nPartition type allowing only one subcommunity\n\n\nsource\n\n\n#\n\n\nDiversity.Species\n \n \nType\n.\n\n\nA subtype of AbstractSimilarity where all species are completely distinct\n\n\nThis type is the simplest AbstractSimilarity subtype, which identifies all species as unique and completely distinct from each other.\n\n\nsource\n\n\n#\n\n\nDiversity.Subcommunities\n \n \nType\n.\n\n\nPartition type with multiple subcommunities\n\n\nsource\n\n\n#\n\n\nDiversity.Taxonomy\n \n \nType\n.\n\n\nA subtype of AbstractSimilarity with similarity between related taxa\n\n\nThis subtype of AbstractSimilarity allows taxonomic similarity matrices\n\n\nsource\n\n\n#\n\n\nDiversity.Unique\n \n \nType\n.\n\n\nA subtype of AbstractSimilarity where all individuals are completely distinct\n\n\nThis type is the simplest AbstractSimilarity subtype, which identifies all individuals as unique and completely distinct from each other.\n\n\nsource\n\n\n#\n\n\nDiversity.diversity\n \n \nMethod\n.\n\n\nCalculates subcommunity and metacommunity diversities\n\n\nCalculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.\n\n\nArguments:\n\n\n\n\ndl\n: a DiversityLevel\n\n\ndm\n: a DiversityMeasure\n\n\nmeta\n: a Metacommunity\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\nReturns:\n\n\nThe requested diversities.\n\n\nsource\n\n\n#\n\n\nDiversity.diversity\n \n \nMethod\n.\n\n\nCalculates subcommunity and metacommunity diversities\n\n\nCalculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.\n\n\nArguments:\n\n\n\n\ndls\n: a Set of DiversityLevels\n\n\ndms\n: a Set of DiversityMeasures\n\n\nmeta\n: a Metacommunity\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\nReturns:\n\n\nA vector containing all of the diversity levels of all of the requested diversities.\n\n\nsource\n\n\n#\n\n\nDiversity.getASCIIName\n \n \nFunction\n.\n\n\nReturn the ASCII name of the DiversityMeasure\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing simple ASCII name of DiversityMeasure\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getFullName\n \n \nFunction\n.\n\n\nReturn the full name of the DiversityMeasure\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing full descriptive name of DiversityMeasure\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getName\n \n \nMethod\n.\n\n\nReturn the name of the DiversityMeasure\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\n\n\nReturns:\n\n\n\n\nString containing true unicode name of DiversityMeasure\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.getabundance\n \n \nFunction\n.\n\n\nRetrieves (and possibly calculates) the relative abundances of a metacommunity\n\n\nsource\n\n\n#\n\n\nDiversity.getmetaordinariness!\n \n \nMethod\n.\n\n\nRetrieves (and possibly calculates) the ordinarinesses of a whole metacommunity\n\n\nsource\n\n\n#\n\n\nDiversity.getordinariness!\n \n \nMethod\n.\n\n\nRetrieves (and possibly calculates) the ordinarinesses of the subcommunities in a metacommunity\n\n\nsource\n\n\n#\n\n\nDiversity.getweight\n \n \nMethod\n.\n\n\nRetrieves (and possibly calculates) the relative weights of the subcommunities\n\n\nsource\n\n\n#\n\n\nDiversity.inddiv\n \n \nFunction\n.\n\n\nReturns individual diversities of a diversity measure\n\n\nTakes a diversity measure and single order or vector of orders, and returns the individual diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n / \nqs\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns individual diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.metadiv\n \n \nFunction\n.\n\n\nCalculates metacommunity diversities of a diversity measure\n\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the metacommunity diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns metacommunity diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.qD\n \n \nMethod\n.\n\n\nCalculates Hill / naive-similarity diversity\n\n\nCalculates Hill number or naive diversity of order(s) \nqs\n of a population with given relative proportions.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different types in population\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.qDZ\n \n \nMethod\n.\n\n\nCalculates Leinster-Cobbold / similarity-sensitive diversity\n\n\nCalculates Leinster-Cobbold general diversity of \n= 1 order(s) \nqs\n of a population with given relative \nproportions\n, and similarity matrix \nZ\n.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different types in a population\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.subdiv\n \n \nFunction\n.\n\n\nCalculates subcommunity diversities of a diversity measure\n\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the subcommunity diversities for those values.\n\n\nArguments:\n\n\n\n\ndm\n: DiversityMeasure\n\n\nq\n: a single order or a vector of orders\n\n\n\n\nReturns:\n\n\n\n\nReturns subcommunity diversities of \ndm\n for a single order \nq\n or a vector of order \nqs\n.\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.DiversityLevel\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Onecommunity\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.Unique\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.diversity\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getordinariness!\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Introduction"
        }, 
        {
            "location": "/#diversityjl", 
            "text": "The main  Diversity  package provides basic numbers-equivalent diversity measures (described in  Hill, 1973 ), similarity-sensitive diversity measures (generalised from Hill, and described in  Leinster and Cobbold, 2012 ), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in  Reeve et al, 2014 ). The diversity functions exist both with unicode names (e.g.  \u1fb1() ), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g.  NormalisedAlpha() ), which are. We also provide functions to calculate appropriate  subcommunityDiversity()  and  metacommunityDiversity()  values for each measure, a general  diversity()  function for extract any diversity measure at a series of scales.  Accessing the main functionality in the package is simple:  using Diversity\n...\ndiversities = metacommunityDiversity(NormalisedAlpha(Metacommunity(proportions, Z)), [0, 1, 2, Inf])\ndiversity = metacommunityDiversity(RawRho(Metacommunity(proportions, Z)), 2)   Diversity.jl   #  Diversity     Module .  The main  Diversity  module provides basic numbers-equivalent diversity measures (described in  Hill, 1973 ), similarity-sensitive diversity measures (generalised from Hill, and described in  Leinster and Cobbold, 2012 ), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in  Reeve et al, 2014 ). The diversity functions exist both with unicode names (e.g.  \u1fb1() ), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g.  NormalisedAlpha() ), which are. We also provide functions to calculate appropriate  subcommunityDiversity()  and  metacommunityDiversity()  values for each measure, a general  diversity()  function for extract any diversity measure at a series of scales.  source  #  Diversity.individualDiversity     Constant .  Generates the function to calculate individual diversities  Generates the function to calculate individual diversities for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the individual diversities for those values.   source  #  Diversity.metacommunityDiversity     Constant .  Generates the function to calculate metacommunity diversity  Generates the function to calculate metacommunity diversity for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the metacommunity diversities for those values.   source  #  Diversity.subcommunityDiversity     Constant .  Generates the function to calculate subcommunity diversity  Generates the function to calculate subcommunity diversity for a series of orders, represented as a vector of qs.  Arguments:   dm : DiversityMeasure   Returns:   Function which takes a single number or vector of values of parameter q, and returns the subcommunity diversities for those values.   source  #  Diversity.DiversityLevel     Type .  Enumeration of levels that can exist / be calculated for a metacommunity.  source  #  Diversity.MatrixSimilarity     Type .  A general matrix-based AbstractSimilarity subtype  This subtype of AbstractSimilarity simply holds a matrix with similarities between individuals.  Members:   zMatrix  A two-dimensional matrix representing similarity between   individuals.   source  #  Diversity.MatrixSimilarity     Method .  Constructor for MatrixSimilarity  Creates an instance of the MatrixSimilarity class, with an arbitrary similarity matrix.  Arguments:   z : similarity matrix   source  #  Diversity.Metacommunity     Type .  Single subcommunity contructor for Metacommunity  source  #  Diversity.Metacommunity     Type .  Multiple subcommunity constructors for Metacommunity  source  #  Diversity.Metacommunity     Type .  Metacommunity type, representing a collection of individuals  Type representing a whole metacommunity containing a single community or a collection of subcommunities. The metacommunity of individuals  may  be further partitioned into smaller groups. For instance this may be an ecosystem, which consists of a series of subcommunities. The AbstractPartition subtype within it stores relative abundances of different types, e.g. species, and also allows for similarity between individuals.  Constructor:  Metacommunity(part::AbstractPartition, sim::AbstractSimilarity)   part  is an instance of type Part, the partition type, e.g. Subcommunities, a subtype of AbstractPartition.  sim  is an instance of type Sim, the similarity type, e.g. Species, a subtype of AbstractSimilarity.   Members:   partition  the instance of the AbstractPartition subtype, containing the subcommunities. These should be accessed through getabundance(::Metacommunity).  similarity  The instance of the AbstractSimilarity subtype, from which similarities between individuals can be calculated.  ordinariness  A cache of the ordinariness of the individuals in the Partition. Should only be accessed through getordinariness!(::Metacommunity), which will populate the cache if it has not yet been calculated.  FPType  is the kind of number storage, a subtype of AbstractFloat.   source  #  Diversity.Metacommunity     Method .  Constructor for Metacommunity with a similarity matrix  source  #  Diversity.Onecommunity     Type .  Partition type allowing only one subcommunity  source  #  Diversity.Species     Type .  A subtype of AbstractSimilarity where all species are completely distinct  This type is the simplest AbstractSimilarity subtype, which identifies all species as unique and completely distinct from each other.  source  #  Diversity.Subcommunities     Type .  Partition type with multiple subcommunities  source  #  Diversity.Taxonomy     Type .  A subtype of AbstractSimilarity with similarity between related taxa  This subtype of AbstractSimilarity allows taxonomic similarity matrices  source  #  Diversity.Unique     Type .  A subtype of AbstractSimilarity where all individuals are completely distinct  This type is the simplest AbstractSimilarity subtype, which identifies all individuals as unique and completely distinct from each other.  source  #  Diversity.diversity     Method .  Calculates subcommunity and metacommunity diversities  Calculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.  Arguments:   dl : a DiversityLevel  dm : a DiversityMeasure  meta : a Metacommunity  qs : single number or vector of values of parameter q   Returns:  The requested diversities.  source  #  Diversity.diversity     Method .  Calculates subcommunity and metacommunity diversities  Calculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.  Arguments:   dls : a Set of DiversityLevels  dms : a Set of DiversityMeasures  meta : a Metacommunity  qs : single number or vector of values of parameter q   Returns:  A vector containing all of the diversity levels of all of the requested diversities.  source  #  Diversity.getASCIIName     Function .  Return the ASCII name of the DiversityMeasure  Arguments:   dm : DiversityMeasure   Returns:   String containing simple ASCII name of DiversityMeasure   source  #  Diversity.getFullName     Function .  Return the full name of the DiversityMeasure  Arguments:   dm : DiversityMeasure   Returns:   String containing full descriptive name of DiversityMeasure   source  #  Diversity.getName     Method .  Return the name of the DiversityMeasure  Arguments:   dm : DiversityMeasure   Returns:   String containing true unicode name of DiversityMeasure   source  #  Diversity.getabundance     Function .  Retrieves (and possibly calculates) the relative abundances of a metacommunity  source  #  Diversity.getmetaordinariness!     Method .  Retrieves (and possibly calculates) the ordinarinesses of a whole metacommunity  source  #  Diversity.getordinariness!     Method .  Retrieves (and possibly calculates) the ordinarinesses of the subcommunities in a metacommunity  source  #  Diversity.getweight     Method .  Retrieves (and possibly calculates) the relative weights of the subcommunities  source  #  Diversity.inddiv     Function .  Returns individual diversities of a diversity measure  Takes a diversity measure and single order or vector of orders, and returns the individual diversities for those values.  Arguments:   dm : DiversityMeasure  q  /  qs : a single order or a vector of orders   Returns:   Returns individual diversities of  dm  for a single order  q  or a vector of order  qs .   source  #  Diversity.metadiv     Function .  Calculates metacommunity diversities of a diversity measure  Takes a diversity measure and single order or vector of orders, and calculates and returns the metacommunity diversities for those values.  Arguments:   dm : DiversityMeasure  q : a single order or a vector of orders   Returns:   Returns metacommunity diversities of  dm  for a single order  q  or a vector of order  qs .   source  #  Diversity.qD     Method .  Calculates Hill / naive-similarity diversity  Calculates Hill number or naive diversity of order(s)  qs  of a population with given relative proportions.  Arguments:   proportions : relative proportions of different types in population  qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source  #  Diversity.qDZ     Method .  Calculates Leinster-Cobbold / similarity-sensitive diversity  Calculates Leinster-Cobbold general diversity of  = 1 order(s)  qs  of a population with given relative  proportions , and similarity matrix  Z .  Arguments:   proportions : relative proportions of different types in a population  qs : single number or vector of orders of diversity measurement  Z : similarity matrix   Returns:   Diversity of order qs (single number or vector of diversities)   source  #  Diversity.subdiv     Function .  Calculates subcommunity diversities of a diversity measure  Takes a diversity measure and single order or vector of orders, and calculates and returns the subcommunity diversities for those values.  Arguments:   dm : DiversityMeasure  q : a single order or a vector of orders   Returns:   Returns subcommunity diversities of  dm  for a single order  q  or a vector of order  qs .   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.DiversityLevel  Diversity.MatrixSimilarity  Diversity.MatrixSimilarity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Onecommunity  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.Unique  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.diversity  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getordinariness!  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Diversity.jl"
        }, 
        {
            "location": "/ecology/", 
            "text": "In the \nDiversity.Ecology\n package, we replicate old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and ecosystem measures. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).\n\n\n\n\nUsage\n\n\nAccessing the functionality in the package is simple:\n\n\nusing Diversity.Ecology\n\ncommunity = [10. 20. 20.]\n\ndiversity = simpson(community)\n\necosystem = [2. 2. 0.; 0. 2. 2.]\n\nZ = eye(3)\n\njaccard(ecosystem)\ngeneralisedjaccard(ecosystem, [0, 1, 2])\ngeneralisedjaccard(ecosystem, [0, 1, 2], Z)\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Ecology\n \n \nModule\n.\n\n\nThe \nDiversity.Ecology\n module replicates old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and metacommunity levels. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedjaccard\n \n \nFunction\n.\n\n\nCalculate a generalised version of the Jaccard index\n\n\nCalculates a generalisation of the Jaccard index of two columns representing the counts of two subcommunities. This evaluates to raw alpha / gamma - 1 for a series of orders, repesented as a vector of qs (or a single number). It also includes an optional similarity matrix for the species. This gives a measure of the distinctness of the subcommunities, though we believe that beta and normalised beta have better properties.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nJaccard-related distinctivess measures\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedrichness\n \n \nFunction\n.\n\n\nCalculate a generalised version of richness\n\n\nCalculates (species) richness of a series of columns representing independent subcommunity counts, which is diversity at q = 0 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nDM\n: diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\ndiversity (at ecosystem level) or diversities (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedshannon\n \n \nFunction\n.\n\n\nCalculate a generalised version of Shannon entropy\n\n\nCalculates Shannon entropy of a series of columns representing independent subcommunity counts, which is log(diversity) at q = 1 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nDM\n: diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nentropy (at ecosystem level) or entropies (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.generalisedsimpson\n \n \nFunction\n.\n\n\nCalculate a generalised version of Simpson's index\n\n\nCalculates Simpson's index of a series of columns representing independent subcommunity counts, which is 1 / diversity at q = 2 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\nlevel\n: DiversityLevel to calculate at (e.g. subcommunityDiversity)\n\n\nDM\n: diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)\n\n\nproportions\n: population proportions\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nconcentration (at ecosystem level) or concentrations (of subcommunities)\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.jaccard\n \n \nMethod\n.\n\n\nCalculate the Jaccard index\n\n\nCalculates Jaccard index (Jaccard similarity coefficient) of two columns representing independent subcommunity counts, which is alpha(proportions, 0) / gamma(proportions, 0) - 1\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nthe Jaccard index\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.richness\n \n \nMethod\n.\n\n\nCalculate species richness of populations\n\n\nCalculates (species) richness of a series of columns representing independent subcommunity counts, which is diversity at q = 0\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\ndiversities of subcommunities\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.shannon\n \n \nMethod\n.\n\n\nCalculate Shannon entropy of populations\n\n\nCalculates shannon entropy of a series of columns representing independent subcommunity counts, which is log(diversity) at q = 1\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nentropies of subcommunities\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Ecology.simpson\n \n \nMethod\n.\n\n\nCalculate Simpson's index\n\n\nCalculates Simpson's index of a series of columns representing independent subcommunity counts, which is 1 / diversity (or concentration) at q = 2\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nconcentrations of subcommunities\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.DiversityLevel\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Onecommunity\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.Unique\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.diversity\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getordinariness!\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Ecology"
        }, 
        {
            "location": "/ecology/#usage", 
            "text": "Accessing the functionality in the package is simple:  using Diversity.Ecology\n\ncommunity = [10. 20. 20.] \ndiversity = simpson(community)\n\necosystem = [2. 2. 0.; 0. 2. 2.] \nZ = eye(3)\n\njaccard(ecosystem)\ngeneralisedjaccard(ecosystem, [0, 1, 2])\ngeneralisedjaccard(ecosystem, [0, 1, 2], Z)   Diversity.jl   #  Diversity.Ecology     Module .  The  Diversity.Ecology  module replicates old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and metacommunity levels. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).  source  #  Diversity.Ecology.generalisedjaccard     Function .  Calculate a generalised version of the Jaccard index  Calculates a generalisation of the Jaccard index of two columns representing the counts of two subcommunities. This evaluates to raw alpha / gamma - 1 for a series of orders, repesented as a vector of qs (or a single number). It also includes an optional similarity matrix for the species. This gives a measure of the distinctness of the subcommunities, though we believe that beta and normalised beta have better properties.  Arguments:   proportions : population proportions  qs : single number or vector of values of parameter q  Z : similarity matrix   Returns:   Jaccard-related distinctivess measures   source  #  Diversity.Ecology.generalisedrichness     Function .  Calculate a generalised version of richness  Calculates (species) richness of a series of columns representing independent subcommunity counts, which is diversity at q = 0 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  DM : diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)  proportions : population proportions  Z : similarity matrix   Returns:   diversity (at ecosystem level) or diversities (of subcommunities)   source  #  Diversity.Ecology.generalisedshannon     Function .  Calculate a generalised version of Shannon entropy  Calculates Shannon entropy of a series of columns representing independent subcommunity counts, which is log(diversity) at q = 1 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  DM : diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)  proportions : population proportions  Z : similarity matrix   Returns:   entropy (at ecosystem level) or entropies (of subcommunities)   source  #  Diversity.Ecology.generalisedsimpson     Function .  Calculate a generalised version of Simpson's index  Calculates Simpson's index of a series of columns representing independent subcommunity counts, which is 1 / diversity at q = 2 for any diversity measure (passed as the second argument). It also includes a similarity matrix for the species  Arguments:   level : DiversityLevel to calculate at (e.g. subcommunityDiversity)  DM : diversity measure to use (one of \u03b1, \u1fb1, \u03b2, \u03b2\u0304, \u03c1, \u03c1\u0304, \u03b3)  proportions : population proportions  Z : similarity matrix   Returns:   concentration (at ecosystem level) or concentrations (of subcommunities)   source  #  Diversity.Ecology.jaccard     Method .  Calculate the Jaccard index  Calculates Jaccard index (Jaccard similarity coefficient) of two columns representing independent subcommunity counts, which is alpha(proportions, 0) / gamma(proportions, 0) - 1  Arguments:   proportions : population proportions   Returns:   the Jaccard index   source  #  Diversity.Ecology.richness     Method .  Calculate species richness of populations  Calculates (species) richness of a series of columns representing independent subcommunity counts, which is diversity at q = 0  Arguments:   proportions : population proportions   Returns:   diversities of subcommunities   source  #  Diversity.Ecology.shannon     Method .  Calculate Shannon entropy of populations  Calculates shannon entropy of a series of columns representing independent subcommunity counts, which is log(diversity) at q = 1  Arguments:   proportions : population proportions   Returns:   entropies of subcommunities   source  #  Diversity.Ecology.simpson     Method .  Calculate Simpson's index  Calculates Simpson's index of a series of columns representing independent subcommunity counts, which is 1 / diversity (or concentration) at q = 2  Arguments:   proportions : population proportions   Returns:   concentrations of subcommunities   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.DiversityLevel  Diversity.MatrixSimilarity  Diversity.MatrixSimilarity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Onecommunity  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.Unique  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.diversity  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getordinariness!  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }, 
        {
            "location": "/hill/", 
            "text": "Hill numbers\n are found in the \nDiversity.Hill\n package.\n\n\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\nusing Diversity.Hill\n\n# Load community to study\n\ndiversities = hillnumber(community, [0, 1, 2])\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Hill\n \n \nModule\n.\n\n\nHill numbers\n are found in the \nDiversity.Hill\n package.\n\n\nsource\n\n\n#\n\n\nDiversity.Hill.hillnumber\n \n \nMethod\n.\n\n\nCalculates Hill numbers\n\n\nCalculate the Hill number (or naive diversity) of order q of population(s) with given relative proportions\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals / species                in population (vector, or matrix where columns are                individual populations)\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.DiversityLevel\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Onecommunity\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.Unique\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.diversity\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getordinariness!\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Hill"
        }, 
        {
            "location": "/hill/#usage", 
            "text": "Accessing the main functionality in the package is simple:  using Diversity.Hill\n\n# Load community to study\n\ndiversities = hillnumber(community, [0, 1, 2])   Diversity.jl   #  Diversity.Hill     Module .  Hill numbers  are found in the  Diversity.Hill  package.  source  #  Diversity.Hill.hillnumber     Method .  Calculates Hill numbers  Calculate the Hill number (or naive diversity) of order q of population(s) with given relative proportions  Arguments:   proportions : relative proportions of different individuals / species                in population (vector, or matrix where columns are                individual populations)  qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.DiversityLevel  Diversity.MatrixSimilarity  Diversity.MatrixSimilarity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Onecommunity  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.Unique  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.diversity  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getordinariness!  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }, 
        {
            "location": "/jost/", 
            "text": "Lou Jost's \ndiversity\n \nmeasures\n are found in the \nDiversity.Jost\n package.\n\n\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\nusing Diversity.Jost\n\n# Load community to study\n\ndiversities = jost\u03b2(community, [0, 1, 2])\n\n\n\n\n\n\n\nDiversity.jl\n\n\n\n\n#\n\n\nDiversity.Jost\n \n \nModule\n.\n\n\nLou Jost's \ndiversity\n \nmeasures\n are found in the \nDiversity.Jost\n module.\n\n\nsource\n\n\n#\n\n\nDiversity.Jost.jostalpha\n \n \nMethod\n.\n\n\nCalculates Jost's alpha diversity\n\n\nCalculates Jost's alpha diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive-community ecosystem diversity divided by the naive-community beta diversity.\n\n\nArguments:\n\n\n\n\nproportions\n relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing sub-communities, and last representing values of q\n\n\n\n\nsource\n\n\n#\n\n\nDiversity.Jost.jostbeta\n \n \nMethod\n.\n\n\nCalculates Jost's beta diversity\n\n\nCalculates Jost's beta diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive gamma diversity divided by Jost's alpha diversity\n\n\nArguments:\n\n\n\n\nproportions\n relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing sub-communities, and last representing values of q\n\n\n\n\nsource\n\n\n\n\nDiversity\n\n\nDiversity.Ecology\n\n\nDiversity.Hill\n\n\nDiversity.Jost\n\n\nDiversity.individualDiversity\n\n\nDiversity.metacommunityDiversity\n\n\nDiversity.subcommunityDiversity\n\n\nDiversity.DiversityLevel\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.MatrixSimilarity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Metacommunity\n\n\nDiversity.Onecommunity\n\n\nDiversity.Species\n\n\nDiversity.Subcommunities\n\n\nDiversity.Taxonomy\n\n\nDiversity.Unique\n\n\nDiversity.Ecology.generalisedjaccard\n\n\nDiversity.Ecology.generalisedrichness\n\n\nDiversity.Ecology.generalisedshannon\n\n\nDiversity.Ecology.generalisedsimpson\n\n\nDiversity.Ecology.jaccard\n\n\nDiversity.Ecology.richness\n\n\nDiversity.Ecology.shannon\n\n\nDiversity.Ecology.simpson\n\n\nDiversity.Hill.hillnumber\n\n\nDiversity.Jost.jostalpha\n\n\nDiversity.Jost.jostbeta\n\n\nDiversity.diversity\n\n\nDiversity.diversity\n\n\nDiversity.getASCIIName\n\n\nDiversity.getFullName\n\n\nDiversity.getName\n\n\nDiversity.getabundance\n\n\nDiversity.getmetaordinariness!\n\n\nDiversity.getordinariness!\n\n\nDiversity.getweight\n\n\nDiversity.inddiv\n\n\nDiversity.metadiv\n\n\nDiversity.qD\n\n\nDiversity.qDZ\n\n\nDiversity.subdiv", 
            "title": "Jost"
        }, 
        {
            "location": "/jost/#usage", 
            "text": "Accessing the main functionality in the package is simple:  using Diversity.Jost\n\n# Load community to study\n\ndiversities = jost\u03b2(community, [0, 1, 2])   Diversity.jl   #  Diversity.Jost     Module .  Lou Jost's  diversity   measures  are found in the  Diversity.Jost  module.  source  #  Diversity.Jost.jostalpha     Method .  Calculates Jost's alpha diversity  Calculates Jost's alpha diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive-community ecosystem diversity divided by the naive-community beta diversity.  Arguments:   proportions  relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)  qs  single number or vector of orders of diversity measurement   Returns:   array of diversities, first dimension representing sub-communities, and last representing values of q   source  #  Diversity.Jost.jostbeta     Method .  Calculates Jost's beta diversity  Calculates Jost's beta diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive gamma diversity divided by Jost's alpha diversity  Arguments:   proportions  relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)  qs  single number or vector of orders of diversity measurement   Returns:   array of diversities, first dimension representing sub-communities, and last representing values of q   source   Diversity  Diversity.Ecology  Diversity.Hill  Diversity.Jost  Diversity.individualDiversity  Diversity.metacommunityDiversity  Diversity.subcommunityDiversity  Diversity.DiversityLevel  Diversity.MatrixSimilarity  Diversity.MatrixSimilarity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Metacommunity  Diversity.Onecommunity  Diversity.Species  Diversity.Subcommunities  Diversity.Taxonomy  Diversity.Unique  Diversity.Ecology.generalisedjaccard  Diversity.Ecology.generalisedrichness  Diversity.Ecology.generalisedshannon  Diversity.Ecology.generalisedsimpson  Diversity.Ecology.jaccard  Diversity.Ecology.richness  Diversity.Ecology.shannon  Diversity.Ecology.simpson  Diversity.Hill.hillnumber  Diversity.Jost.jostalpha  Diversity.Jost.jostbeta  Diversity.diversity  Diversity.diversity  Diversity.getASCIIName  Diversity.getFullName  Diversity.getName  Diversity.getabundance  Diversity.getmetaordinariness!  Diversity.getordinariness!  Diversity.getweight  Diversity.inddiv  Diversity.metadiv  Diversity.qD  Diversity.qDZ  Diversity.subdiv", 
            "title": "Usage"
        }
    ]
}