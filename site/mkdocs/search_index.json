{
    "docs": [
        {
            "location": "/diversity/", 
            "text": "The \nDiversity\n package provides functionality for measuring alpha,\nbeta and gamma diversity of subcommunities and ecosystems. It uses\ndiversity measures extended from those described in the arXiv paper\n\narXiv:1404.6520 (q-bio.QM)\n,\n\nHow to partition diversity\n. The alpha, beta and gamma diversities in\nthe paper are supplemented by beta diversity measures related to\nredundancy, DR and representativeness, DR\u0304, of ecosystems, and their associated\nsubcommunities (D\u03c1 and D\u03c1\u0304, respectively).\n\n\nUsage\n\n\nAccessing the functionality in the package is simple:\n\n\nusing Diversity\n\n# Load up ecosystem\n\ndiversities = D\u03b1\u0304(ecosystem, [0, 1, 2, Inf], Z)\ndiversities = D\u03b3(ecosystem, [0, 1, 2, Inf], Z)", 
            "title": "Introduction"
        }, 
        {
            "location": "/diversity/#usage", 
            "text": "Accessing the functionality in the package is simple:  using Diversity\n\n# Load up ecosystem\n\ndiversities = D\u03b1\u0304(ecosystem, [0, 1, 2, Inf], Z)\ndiversities = D\u03b3(ecosystem, [0, 1, 2, Inf], Z)", 
            "title": "Usage"
        }, 
        {
            "location": "/ecology/", 
            "text": "In the \nDiversity.Ecology\n package, we replicate old ecological\ndiversity measures and generalised versions of them that relate to our\ngeneral measures of alpha, beta and gamma diversity at subcommunity\nand ecosystem measures. The generalisations of the richness, Shannon\nand Simpson are the only standard measures we are aware of whose\nsubcommunity components sum directly to the corresponding ecosystem\nmeasure (although note that Simpson's index decreases for increased\ndiversity, so small components are more diverse).\n\n\nUsage\n\n\nAccessing the functionality in the package is simple:\n\n\nusing Diversity.Ecology\n\ncommunity = [10. 20. 20.]'\ndiversity = simpson(community)\n\necosystem = [2. 2. 0.; 0. 2. 2.]'\nZ = eye(3)\n\njaccard(ecosystem)\ngeneralisedjaccard(ecosystem, [0, 1, 2])\ngeneralisedjaccard(ecosystem, [0, 1, 2], Z)", 
            "title": "Ecology"
        }, 
        {
            "location": "/ecology/#usage", 
            "text": "Accessing the functionality in the package is simple:  using Diversity.Ecology\n\ncommunity = [10. 20. 20.]'\ndiversity = simpson(community)\n\necosystem = [2. 2. 0.; 0. 2. 2.]'\nZ = eye(3)\n\njaccard(ecosystem)\ngeneralisedjaccard(ecosystem, [0, 1, 2])\ngeneralisedjaccard(ecosystem, [0, 1, 2], Z)", 
            "title": "Usage"
        }, 
        {
            "location": "/hill/", 
            "text": "Hill numbers\n are found in the\n\nDiversity.Hill\n package.\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\nusing Diversity.Hill\n\n# Load community to study\n\ndiversities = hillnumber(community, [0, 1, 2])", 
            "title": "Hill"
        }, 
        {
            "location": "/hill/#usage", 
            "text": "Accessing the main functionality in the package is simple:  using Diversity.Hill\n\n# Load community to study\n\ndiversities = hillnumber(community, [0, 1, 2])", 
            "title": "Usage"
        }, 
        {
            "location": "/jost/", 
            "text": "Lou Jost's\n\ndiversity\n\n\nmeasures\n are\nfound in the \nDiversity.Jost\n package.\n\n\nUsage\n\n\nAccessing the main functionality in the package is simple:\n\n\nusing Diversity.Jost\n\n# Load community to study\n\ndiversities = jost\u03b2(community, [0, 1, 2])", 
            "title": "Jost"
        }, 
        {
            "location": "/jost/#usage", 
            "text": "Accessing the main functionality in the package is simple:  using Diversity.Jost\n\n# Load community to study\n\ndiversities = jost\u03b2(community, [0, 1, 2])", 
            "title": "Usage"
        }, 
        {
            "location": "/api/Diversity/", 
            "text": "Diversity\n\n\nFunctions [Exported]\n\n\n\n\n\n\nDiversity.Community \n\u00b6\n\n\nCommunity type, representing a single community\n\n\nsource:\n\n\nDiversity/src/Collection.jl:213\n\n\n\n\n\n\nDiversity.Ecosystem \n\u00b6\n\n\nEcosystem type, representing an ecosystem of multiple subcommunities\n\n\nsource:\n\n\nDiversity/src/Collection.jl:205\n\n\nMethods [Exported]\n\n\n\n\n\n\nDA{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity alpha diversity / naive-community diversity\n\n\nCalculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector\nof qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:165\n\n\n\n\n\n\nDA{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity alpha diversity / naive-community diversity\n\n\nCalculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector\nof qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:165\n\n\n\n\n\n\nDB{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration\n\n\nCalculates average raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\n`qs single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:388\n\n\n\n\n\n\nDB{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration\n\n\nCalculates average raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\n`qs single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:388\n\n\n\n\n\n\nDB\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity beta diversity / effective number of communities\n\n\nCalculates average normalised beta diversity or the effective number\nof distinct subcommunities present in a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:445\n\n\n\n\n\n\nDB\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity beta diversity / effective number of communities\n\n\nCalculates average normalised beta diversity or the effective number\nof distinct subcommunities present in a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:445\n\n\n\n\n\n\nDG{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:539\n\n\n\n\n\n\nDG{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:539\n\n\n\n\n\n\nDR{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity redundancy\n\n\nCalculates average redundancy of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of redundancies representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:362\n\n\n\n\n\n\nDR{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive supercommunity redundancy\n\n\nCalculates average redundancy of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of redundancies representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:362\n\n\n\n\n\n\nDR\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity representativeness\n\n\nCalculates average representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of representativenesses representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:418\n\n\n\n\n\n\nDR\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity representativeness\n\n\nCalculates average representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of representativenesses representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:418\n\n\n\n\n\n\nD\u0100{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity alpha diversity\n\n\nCalculates average (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:191\n\n\n\n\n\n\nD\u0100{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity alpha diversity\n\n\nCalculates average (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:191\n\n\n\n\n\n\nD\u03b1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity alpha diversity / naive-community diversity\n\n\nCalculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:101\n\n\n\n\n\n\nD\u03b1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity alpha diversity / naive-community diversity\n\n\nCalculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:101\n\n\n\n\n\n\nD\u03b2{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration\n\n\nCalculates the raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:252\n\n\n\n\n\n\nD\u03b2{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration\n\n\nCalculates the raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:252\n\n\n\n\n\n\nD\u03b2\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity beta diversity\n\n\nCalculates normalised beta diversities or the effective number of\ndistinct subcommunities perceived by a series of subcommunities\nrepresented by columns of independent subcommunity counts, represented\nas a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:327\n\n\n\n\n\n\nD\u03b2\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity beta diversity\n\n\nCalculates normalised beta diversities or the effective number of\ndistinct subcommunities perceived by a series of subcommunities\nrepresented by columns of independent subcommunity counts, represented\nas a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:327\n\n\n\n\n\n\nD\u03b3{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:472\n\n\n\n\n\n\nD\u03b3{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:472\n\n\n\n\n\n\nD\u03b3\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:506\n\n\n\n\n\n\nD\u03b3\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:506\n\n\n\n\n\n\nD\u03c1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity redundancy\n\n\nCalculates redundancy of a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of redundancies, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:218\n\n\n\n\n\n\nD\u03c1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nRaw similarity-sensitive subcommunity redundancy\n\n\nCalculates redundancy of a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of redundancies, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:218\n\n\n\n\n\n\nD\u03c1\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity representativeness\n\n\nCalculates the representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of representativenesses, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:290\n\n\n\n\n\n\nD\u03c1\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity representativeness\n\n\nCalculates the representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of representativenesses, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:290\n\n\n\n\n\n\nD\u1e20{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:565\n\n\n\n\n\n\nD\u1e20{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive supercommunity gamma diversity\n\n\nCalculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nvector of diversities representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:565\n\n\n\n\n\n\nD\u1fb1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity alpha diversity)\n\n\nCalculates (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:133\n\n\n\n\n\n\nD\u1fb1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nNormalised similarity-sensitive subcommunity alpha diversity)\n\n\nCalculates (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of\nqs.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:133\n\n\n\n\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculates subcommunity and supercommunity diversities\n\n\nCalculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304\n\n\n\n\n\n\nproportions\n:population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                         supercommunity diversity\n\n\n\n\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                       subcommunity diversities \n\n\n\n\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\n\n\nReturns:\n\n\nSome or all (as tuple) of:  \n\n\n\n\n\n\nvector of supercommunity diversities representing values of q  \n\n\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q  \n\n\n\n\n\n\nmultidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:38\n\n\n\n\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculates subcommunity and supercommunity diversities\n\n\nCalculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304\n\n\n\n\n\n\nproportions\n:population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                         supercommunity diversity\n\n\n\n\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                       subcommunity diversities \n\n\n\n\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\n\n\nReturns:\n\n\nSome or all (as tuple) of:  \n\n\n\n\n\n\nvector of supercommunity diversities representing values of q  \n\n\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q  \n\n\n\n\n\n\nmultidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:38\n\n\n\n\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool) \n\u00b6\n\n\nCalculates subcommunity and supercommunity diversities\n\n\nCalculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304\n\n\n\n\n\n\nproportions\n:population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                         supercommunity diversity\n\n\n\n\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                       subcommunity diversities \n\n\n\n\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\n\n\nReturns:\n\n\nSome or all (as tuple) of:  \n\n\n\n\n\n\nvector of supercommunity diversities representing values of q  \n\n\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q  \n\n\n\n\n\n\nmultidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:38\n\n\n\n\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool) \n\u00b6\n\n\nCalculates subcommunity and supercommunity diversities\n\n\nCalculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304\n\n\n\n\n\n\nproportions\n:population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                         supercommunity diversity\n\n\n\n\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                       subcommunity diversities \n\n\n\n\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\n\n\nReturns:\n\n\nSome or all (as tuple) of:  \n\n\n\n\n\n\nvector of supercommunity diversities representing values of q  \n\n\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q  \n\n\n\n\n\n\nmultidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:38\n\n\n\n\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool) \n\u00b6\n\n\nCalculates subcommunity and supercommunity diversities\n\n\nCalculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304\n\n\n\n\n\n\nproportions\n:population proportions\n\n\n\n\n\n\nqs\n: single number or vector of values of parameter q\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                         supercommunity diversity\n\n\n\n\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                       subcommunity diversities \n\n\n\n\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\n\n\nReturns:\n\n\nSome or all (as tuple) of:  \n\n\n\n\n\n\nvector of supercommunity diversities representing values of q  \n\n\n\n\n\n\narray of diversities, first dimension representing subcommunities, and\n  last representing values of q  \n\n\n\n\n\n\nmultidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/GeneralisedDiversities.jl:38\n\n\n\n\n\n\nqDZ{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculates Leinster-Cobbold / similarity-sensitive diversity\n\n\nCalculates Leinster-Cobbold general diversity of \n= 1 order(s) \nqs\n of\na population with given relative \nproportions\n, and similarity matrix\n\nZ\n.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals /\n               species in a population or series of populations\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:102\n\n\n\n\n\n\nqDZ{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculates Leinster-Cobbold / similarity-sensitive diversity\n\n\nCalculates Leinster-Cobbold general diversity of \n= 1 order(s) \nqs\n of\na population with given relative \nproportions\n, and similarity matrix\n\nZ\n.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals /\n               species in a population or series of populations\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:102\n\n\n\n\n\n\nqD{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculates Hill / naive-similarity diversity\n\n\nCalculates Hill number or naive diversity of order(s) \nqs\n of a\npopulation with given relative proportions.\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals /\n               species in population or series of populations\n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:72\n\n\nTypes [Exported]\n\n\n\n\n\n\nDiversity.Collection{S\n:Diversity.Similarity, P\n:Diversity.Partition, FP\n:AbstractFloat} \n\u00b6\n\n\nCollection type, representing a collection of one or more subcommunities\n\n\nType representing a single community or collection of communities. It\ncontains a collection of individuals which \nmay\n be further\npartitioned into smaller groups. For instance this may be an\necosystem, which consists of a series of subcommunities.\n\n\nThe type stores relative abundances of different types, e.g. species,\nand also allows for similarity between individuals.\n\n\nParameterisation:\n\n\nCollection{S, P, FP}\n\n\n\n\n\n\nS\n is the similarity type, e.g. Species, a subtype of Similarity.\n\n\n\n\n\n\nP\n is the partition type, e.g. Subcommunity, a subtype of Partition.\n\n\n\n\n\n\nFP\n is the kind of number storage, a subtype of AbstractFloat.\n\n\n\n\n\n\nMembers:\n\n\n\n\n\n\nabundances\n An array of relative abundances. The first dimension\n               represents the species, and further dimensions\n               represent the structure of collection.\n\n\n\n\n\n\nZ\n A two-dimensional matrix representing similarity between\n      individuals of the base type, S. By default this will be the\n      identity matrix.\n\n\n\n\n\n\nsource:\n\n\nDiversity/src/Collection.jl:154\n\n\n\n\n\n\nDiversity.GeneralSimilarity \n\u00b6\n\n\nA general matrix-based Similarity subtype\n\n\nThis subtype of Similarity simply holds a matrix with similarities\nbetween individuals.\n\n\nMembers:\n\n\n\n\nmatrix\n A two-dimensional matrix representing similarity between\n           individuals. By default this will be the identity matrix,\n           but will require the number of species to be instantiated.\n\n\n\n\nsource:\n\n\nDiversity/src/Collection.jl:60\n\n\n\n\n\n\nDiversity.Onecommunity \n\u00b6\n\n\nPartition type allowing only one subcommunity\n\n\nsource:\n\n\nDiversity/src/Collection.jl:115\n\n\n\n\n\n\nDiversity.Subcommunity \n\u00b6\n\n\nPartition type with multiple subccomunities\n\n\nsource:\n\n\nDiversity/src/Collection.jl:110\n\n\n\n\n\n\nDiversity.Unique \n\u00b6\n\n\nA subtype of Similarity where all individuals are completely distinct\n\n\nThis type is the simplest Similarity subtype, which identifies all\nindividuals as unique and completely distinct from each other.\n\n\nsource:\n\n\nDiversity/src/Collection.jl:16\n\n\nTypealiass [Exported]\n\n\n\n\n\n\nSpecies \n\u00b6\n\n\nA subtype of Similarity where all species are completely distinct\n\n\nThis type is the simplest Similarity subtype, which identifies all\nspecies as unique and completely distinct from each other.\n\n\nsource:\n\n\nDiversity/src/Collection.jl:25\n\n\nMethods [Internal]\n\n\n\n\n\n\ncall(::Type{Diversity.GeneralSimilarity},  Z::Array{Float64, 2}) \n\u00b6\n\n\nConstructor for GeneralSimilarity\n\n\nCreates an instance of the GeneralSimilarity class, with an arbitrary similarity matrix.\n\n\nArguments:\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\nsource:\n\n\nDiversity/src/Collection.jl:74\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool) \n\u00b6\n\n\nCalculate diversity contributions from subcommunities\n\n\nCalculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.\n\n\nArguments:\n\n\n\n\nmeasure\n: diversity measure to use\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nperindividual\n: do we measure per individual in population (true)\n                   or per subcommunity (false)\n\n\nZ\n: similarity matrix\n\n\nreturnsupercommunity\n: boolean describing whether to return the\n                    supercommunity diversity\n\n\nreturnsubcommunity\n: boolean describing whether to return the\n                    subcommunity diversities\n\n\nreturnweights\n: boolean describing whether to return subcommunity weights\n\n\n\n\nReturns:\n\n\n\n\ncontributions of subcommunities to supercommunity diversity (of type measure)\n\n\nand none, some or all (in a tuple) of:\n\n\nvector of supercommunity diversities representing values of q\n\n\narray of diversities, first dimension representing subcommunities, and\n    last representing values of q\n\n\nvector of subcommunity weights\n\n\n\n\nsource:\n\n\nDiversity/src/CommunityContributions.jl:31\n\n\n\n\n\n\npowermean{S\n:Number, T\n:AbstractFloat, U\n:Number}(values::Array{S\n:Number, 1},  order::T\n:AbstractFloat,  weights::Array{U\n:Number, 1}) \n\u00b6\n\n\nCalculates the weighted powermean of a series of numbers\n\n\nCalculates \norder\nth power mean of \nvalues\n, weighted by\n\nweights\n. By default, \nweights\n are equal and \norder\n\nis 1, so this is just the arithmetic mean.\n\n\nArguments:\n\n\n\n\nvalues\n: values for which to calculate mean\n\n\norder\n: order of power mean\n\n\nweights\n: weights of elements, normalised to 1 inside function\n\n\n\n\nReturns:\n\n\n\n\nweighted power mean(s)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:16\n\n\n\n\n\n\npowermean{S\n:Number, T\n:AbstractFloat}(values::Array{S\n:Number, 1},  order::T\n:AbstractFloat) \n\u00b6\n\n\nCalculates the weighted powermean of a series of numbers\n\n\nCalculates \norder\nth power mean of \nvalues\n, weighted by\n\nweights\n. By default, \nweights\n are equal and \norder\n\nis 1, so this is just the arithmetic mean.\n\n\nArguments:\n\n\n\n\nvalues\n: values for which to calculate mean\n\n\norder\n: order of power mean\n\n\nweights\n: weights of elements, normalised to 1 inside function\n\n\n\n\nReturns:\n\n\n\n\nweighted power mean(s)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:16\n\n\n\n\n\n\npowermean{S\n:Number}(values::Array{S\n:Number, 1}) \n\u00b6\n\n\nCalculates the weighted powermean of a series of numbers\n\n\nCalculates \norder\nth power mean of \nvalues\n, weighted by\n\nweights\n. By default, \nweights\n are equal and \norder\n\nis 1, so this is just the arithmetic mean.\n\n\nArguments:\n\n\n\n\nvalues\n: values for which to calculate mean\n\n\norder\n: order of power mean\n\n\nweights\n: weights of elements, normalised to 1 inside function\n\n\n\n\nReturns:\n\n\n\n\nweighted power mean(s)\n\n\n\n\nsource:\n\n\nDiversity/src/EffectiveNumbers.jl:16\n\n\nTypes [Internal]\n\n\n\n\n\n\nDiversity.Partition \n\u00b6\n\n\nAbstract Partition supertype for all partitioning types\n\n\nThis type is the abstract superclass of all partitioning types.\nPartition subtypes allow you to define how to partition your total\ncollection (e.g. an ecosystem) into smaller components (e.g.\nsubcommunities).\n\n\nsource:\n\n\nDiversity/src/Collection.jl:105\n\n\n\n\n\n\nDiversity.Similarity \n\u00b6\n\n\nAbstract Similarity supertype for all similarity measures\n\n\nThis type is the abstract superclass of all similarity types. Its\nsubtypes allow you to define how similarity is measured between\nindividuals.\n\n\nsource:\n\n\nDiversity/src/Collection.jl:8", 
            "title": "Diversity"
        }, 
        {
            "location": "/api/Diversity/#diversity", 
            "text": "", 
            "title": "Diversity"
        }, 
        {
            "location": "/api/Diversity/#functions-exported", 
            "text": "Diversity.Community  \u00b6  Community type, representing a single community  source:  Diversity/src/Collection.jl:213    Diversity.Ecosystem  \u00b6  Ecosystem type, representing an ecosystem of multiple subcommunities  source:  Diversity/src/Collection.jl:205", 
            "title": "Functions [Exported]"
        }, 
        {
            "location": "/api/Diversity/#methods-exported", 
            "text": "DA{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity  Calculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector\nof qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:165    DA{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity  Calculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector\nof qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:165    DB{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration  Calculates average raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    `qs single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:388    DB{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration  Calculates average raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    `qs single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:388    DB\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive supercommunity beta diversity / effective number of communities  Calculates average normalised beta diversity or the effective number\nof distinct subcommunities present in a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:445    DB\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive supercommunity beta diversity / effective number of communities  Calculates average normalised beta diversity or the effective number\nof distinct subcommunities present in a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:445    DG{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive supercommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:539    DG{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive supercommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:539    DR{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive supercommunity redundancy  Calculates average redundancy of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of redundancies representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:362    DR{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive supercommunity redundancy  Calculates average redundancy of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of redundancies representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:362    DR\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive supercommunity representativeness  Calculates average representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of representativenesses representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:418    DR\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive supercommunity representativeness  Calculates average representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of representativenesses representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:418    D\u0100{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive supercommunity alpha diversity  Calculates average (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:191    D\u0100{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive supercommunity alpha diversity  Calculates average (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:191    D\u03b1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity  Calculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:101    D\u03b1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity  Calculates average raw alpha diversity / naive-community diversity of\na series of subcommunities represented by columns of independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:101    D\u03b2{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration  Calculates the raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:252    D\u03b2{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration  Calculates the raw beta diversity / distinctiveness of or\nconcentration of species in a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:252    D\u03b2\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive subcommunity beta diversity  Calculates normalised beta diversities or the effective number of\ndistinct subcommunities perceived by a series of subcommunities\nrepresented by columns of independent subcommunity counts, represented\nas a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:327    D\u03b2\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive subcommunity beta diversity  Calculates normalised beta diversities or the effective number of\ndistinct subcommunities perceived by a series of subcommunities\nrepresented by columns of independent subcommunity counts, represented\nas a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:327    D\u03b3{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive subcommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:472    D\u03b3{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive subcommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:472    D\u03b3\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive subcommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:506    D\u03b3\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive subcommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:506    D\u03c1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Raw similarity-sensitive subcommunity redundancy  Calculates redundancy of a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of redundancies, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:218    D\u03c1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Raw similarity-sensitive subcommunity redundancy  Calculates redundancy of a series of subcommunities represented by\ncolumns of independent subcommunity counts, for a series of orders,\nrepresented as a vector of qs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of redundancies, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:218    D\u03c1\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive subcommunity representativeness  Calculates the representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of representativenesses, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:290    D\u03c1\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive subcommunity representativeness  Calculates the representativeness of a series of subcommunities\nrepresented by columns of independent subcommunity counts, for a\nseries of orders, represented as a vector of qs. Representativeness\nreflects what proportion of the supercommunity each subcommunity is\nrepresentative of on average, so if each subcommunity contains 1/xth\nof the species, then the average representativeness of the\nsubcommunities is 1/x.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of representativenesses, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:290    D\u1e20{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive supercommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:565    D\u1e20{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive supercommunity gamma diversity  Calculates diversity of a series of columns representing independent\nsubcommunity counts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   vector of diversities representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:565    D\u1fb1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Normalised similarity-sensitive subcommunity alpha diversity)  Calculates (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:133    D\u1fb1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Normalised similarity-sensitive subcommunity alpha diversity)  Calculates (normalised alpha) diversity of a series of\nsubcommunities represented by columns of independent subcommunity\ncounts, for a series of orders, represented as a vector of\nqs.  Arguments:    proportions : population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    Returns:   array of diversities, first dimension representing subcommunities, and\n  last representing values of q   source:  Diversity/src/GeneralisedDiversities.jl:133    diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculates subcommunity and supercommunity diversities  Calculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.  Arguments:    measure : the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304    proportions :population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    returnsupercommunity : boolean describing whether to return the\n                         supercommunity diversity    returnsubcommunity : boolean describing whether to return the\n                       subcommunity diversities     returnweights : boolean describing whether to return subcommunity weights    Returns:  Some or all (as tuple) of:      vector of supercommunity diversities representing values of q      array of diversities, first dimension representing subcommunities, and\n  last representing values of q      multidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q    source:  Diversity/src/GeneralisedDiversities.jl:38    diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculates subcommunity and supercommunity diversities  Calculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.  Arguments:    measure : the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304    proportions :population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    returnsupercommunity : boolean describing whether to return the\n                         supercommunity diversity    returnsubcommunity : boolean describing whether to return the\n                       subcommunity diversities     returnweights : boolean describing whether to return subcommunity weights    Returns:  Some or all (as tuple) of:      vector of supercommunity diversities representing values of q      array of diversities, first dimension representing subcommunities, and\n  last representing values of q      multidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q    source:  Diversity/src/GeneralisedDiversities.jl:38    diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool)  \u00b6  Calculates subcommunity and supercommunity diversities  Calculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.  Arguments:    measure : the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304    proportions :population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    returnsupercommunity : boolean describing whether to return the\n                         supercommunity diversity    returnsubcommunity : boolean describing whether to return the\n                       subcommunity diversities     returnweights : boolean describing whether to return subcommunity weights    Returns:  Some or all (as tuple) of:      vector of supercommunity diversities representing values of q      array of diversities, first dimension representing subcommunities, and\n  last representing values of q      multidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q    source:  Diversity/src/GeneralisedDiversities.jl:38    diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)  \u00b6  Calculates subcommunity and supercommunity diversities  Calculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.  Arguments:    measure : the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304    proportions :population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    returnsupercommunity : boolean describing whether to return the\n                         supercommunity diversity    returnsubcommunity : boolean describing whether to return the\n                       subcommunity diversities     returnweights : boolean describing whether to return subcommunity weights    Returns:  Some or all (as tuple) of:      vector of supercommunity diversities representing values of q      array of diversities, first dimension representing subcommunities, and\n  last representing values of q      multidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q    source:  Diversity/src/GeneralisedDiversities.jl:38    diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)  \u00b6  Calculates subcommunity and supercommunity diversities  Calculates any diversity of a series of columns representing\nindependent subcommunity counts, for a series of orders, repesented as\na vector of qs, with similarity matrix Z, by default the (na\u00efve)\nidentity matrix.  Arguments:    measure : the diversity function to be used - one of D\u03b1, D\u03b1\u0304, D\u03c1, D\u03f5\n          (or D\u03c1\u0304), D\u03b3 or D\u03b3\u0304    proportions :population proportions    qs : single number or vector of values of parameter q    Z : similarity matrix    returnsupercommunity : boolean describing whether to return the\n                         supercommunity diversity    returnsubcommunity : boolean describing whether to return the\n                       subcommunity diversities     returnweights : boolean describing whether to return subcommunity weights    Returns:  Some or all (as tuple) of:      vector of supercommunity diversities representing values of q      array of diversities, first dimension representing subcommunities, and\n  last representing values of q      multidimensional array with dimensions matiching shape of proportions,\n  with extra dimension for values of q    source:  Diversity/src/GeneralisedDiversities.jl:38    qDZ{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculates Leinster-Cobbold / similarity-sensitive diversity  Calculates Leinster-Cobbold general diversity of  = 1 order(s)  qs  of\na population with given relative  proportions , and similarity matrix Z .  Arguments:   proportions : relative proportions of different individuals /\n               species in a population or series of populations  qs : single number or vector of orders of diversity measurement  Z : similarity matrix   Returns:   Diversity of order qs (single number or vector of diversities)   source:  Diversity/src/EffectiveNumbers.jl:102    qDZ{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculates Leinster-Cobbold / similarity-sensitive diversity  Calculates Leinster-Cobbold general diversity of  = 1 order(s)  qs  of\na population with given relative  proportions , and similarity matrix Z .  Arguments:   proportions : relative proportions of different individuals /\n               species in a population or series of populations  qs : single number or vector of orders of diversity measurement  Z : similarity matrix   Returns:   Diversity of order qs (single number or vector of diversities)   source:  Diversity/src/EffectiveNumbers.jl:102    qD{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculates Hill / naive-similarity diversity  Calculates Hill number or naive diversity of order(s)  qs  of a\npopulation with given relative proportions.  Arguments:   proportions : relative proportions of different individuals /\n               species in population or series of populations  qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source:  Diversity/src/EffectiveNumbers.jl:72", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/Diversity/#types-exported", 
            "text": "Diversity.Collection{S :Diversity.Similarity, P :Diversity.Partition, FP :AbstractFloat}  \u00b6  Collection type, representing a collection of one or more subcommunities  Type representing a single community or collection of communities. It\ncontains a collection of individuals which  may  be further\npartitioned into smaller groups. For instance this may be an\necosystem, which consists of a series of subcommunities.  The type stores relative abundances of different types, e.g. species,\nand also allows for similarity between individuals.  Parameterisation:  Collection{S, P, FP}    S  is the similarity type, e.g. Species, a subtype of Similarity.    P  is the partition type, e.g. Subcommunity, a subtype of Partition.    FP  is the kind of number storage, a subtype of AbstractFloat.    Members:    abundances  An array of relative abundances. The first dimension\n               represents the species, and further dimensions\n               represent the structure of collection.    Z  A two-dimensional matrix representing similarity between\n      individuals of the base type, S. By default this will be the\n      identity matrix.    source:  Diversity/src/Collection.jl:154    Diversity.GeneralSimilarity  \u00b6  A general matrix-based Similarity subtype  This subtype of Similarity simply holds a matrix with similarities\nbetween individuals.  Members:   matrix  A two-dimensional matrix representing similarity between\n           individuals. By default this will be the identity matrix,\n           but will require the number of species to be instantiated.   source:  Diversity/src/Collection.jl:60    Diversity.Onecommunity  \u00b6  Partition type allowing only one subcommunity  source:  Diversity/src/Collection.jl:115    Diversity.Subcommunity  \u00b6  Partition type with multiple subccomunities  source:  Diversity/src/Collection.jl:110    Diversity.Unique  \u00b6  A subtype of Similarity where all individuals are completely distinct  This type is the simplest Similarity subtype, which identifies all\nindividuals as unique and completely distinct from each other.  source:  Diversity/src/Collection.jl:16", 
            "title": "Types [Exported]"
        }, 
        {
            "location": "/api/Diversity/#typealiass-exported", 
            "text": "Species  \u00b6  A subtype of Similarity where all species are completely distinct  This type is the simplest Similarity subtype, which identifies all\nspecies as unique and completely distinct from each other.  source:  Diversity/src/Collection.jl:25", 
            "title": "Typealiass [Exported]"
        }, 
        {
            "location": "/api/Diversity/#methods-internal", 
            "text": "call(::Type{Diversity.GeneralSimilarity},  Z::Array{Float64, 2})  \u00b6  Constructor for GeneralSimilarity  Creates an instance of the GeneralSimilarity class, with an arbitrary similarity matrix.  Arguments:   Z : similarity matrix   source:  Diversity/src/Collection.jl:74    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool)  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool)  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)  \u00b6  Calculate diversity contributions from subcommunities  Calculates proportions that subcommunities each contribute to\nsupercommunity diversity per subcommunity (perindividual = false), or\nper individual (perindividual = true) - in the latter case scaled\nso that the total # of individuals is 1, since we only have\nrelative abundances.  Arguments:   measure : diversity measure to use  proportions : population proportions  qs : single number or vector of values of parameter q  perindividual : do we measure per individual in population (true)\n                   or per subcommunity (false)  Z : similarity matrix  returnsupercommunity : boolean describing whether to return the\n                    supercommunity diversity  returnsubcommunity : boolean describing whether to return the\n                    subcommunity diversities  returnweights : boolean describing whether to return subcommunity weights   Returns:   contributions of subcommunities to supercommunity diversity (of type measure)  and none, some or all (in a tuple) of:  vector of supercommunity diversities representing values of q  array of diversities, first dimension representing subcommunities, and\n    last representing values of q  vector of subcommunity weights   source:  Diversity/src/CommunityContributions.jl:31    powermean{S :Number, T :AbstractFloat, U :Number}(values::Array{S :Number, 1},  order::T :AbstractFloat,  weights::Array{U :Number, 1})  \u00b6  Calculates the weighted powermean of a series of numbers  Calculates  order th power mean of  values , weighted by weights . By default,  weights  are equal and  order \nis 1, so this is just the arithmetic mean.  Arguments:   values : values for which to calculate mean  order : order of power mean  weights : weights of elements, normalised to 1 inside function   Returns:   weighted power mean(s)   source:  Diversity/src/EffectiveNumbers.jl:16    powermean{S :Number, T :AbstractFloat}(values::Array{S :Number, 1},  order::T :AbstractFloat)  \u00b6  Calculates the weighted powermean of a series of numbers  Calculates  order th power mean of  values , weighted by weights . By default,  weights  are equal and  order \nis 1, so this is just the arithmetic mean.  Arguments:   values : values for which to calculate mean  order : order of power mean  weights : weights of elements, normalised to 1 inside function   Returns:   weighted power mean(s)   source:  Diversity/src/EffectiveNumbers.jl:16    powermean{S :Number}(values::Array{S :Number, 1})  \u00b6  Calculates the weighted powermean of a series of numbers  Calculates  order th power mean of  values , weighted by weights . By default,  weights  are equal and  order \nis 1, so this is just the arithmetic mean.  Arguments:   values : values for which to calculate mean  order : order of power mean  weights : weights of elements, normalised to 1 inside function   Returns:   weighted power mean(s)   source:  Diversity/src/EffectiveNumbers.jl:16", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/api/Diversity/#types-internal", 
            "text": "Diversity.Partition  \u00b6  Abstract Partition supertype for all partitioning types  This type is the abstract superclass of all partitioning types.\nPartition subtypes allow you to define how to partition your total\ncollection (e.g. an ecosystem) into smaller components (e.g.\nsubcommunities).  source:  Diversity/src/Collection.jl:105    Diversity.Similarity  \u00b6  Abstract Similarity supertype for all similarity measures  This type is the abstract superclass of all similarity types. Its\nsubtypes allow you to define how similarity is measured between\nindividuals.  source:  Diversity/src/Collection.jl:8", 
            "title": "Types [Internal]"
        }, 
        {
            "location": "/api/Diversity.Ecology/", 
            "text": "Diversity.Ecology\n\n\nMethods [Exported]\n\n\n\n\n\n\ngeneralisedjaccard(proportions::Array{T, 2},  qs) \n\u00b6\n\n\nCalculate a generalised version of the Jaccard index\n\n\nCalculates a generalisation of the Jaccard index of a series of\ncolumns representing subcommunity counts. This evaluates to is DG / DA\nfor a series of orders, repesented as a vector of qs (or a single\nnumber).  It also includes a similarity matrix for the species. This\ngives measure of the average distinctiveness of the subcommunities.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nJaccard-related distinctivess measures\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:143\n\n\n\n\n\n\ngeneralisedjaccard(proportions::Array{T, 2},  qs,  Z::Array{T, 2}) \n\u00b6\n\n\nCalculate a generalised version of the Jaccard index\n\n\nCalculates a generalisation of the Jaccard index of a series of\ncolumns representing subcommunity counts. This evaluates to is DG / DA\nfor a series of orders, repesented as a vector of qs (or a single\nnumber).  It also includes a similarity matrix for the species. This\ngives measure of the average distinctiveness of the subcommunities.\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\nqs\n: single number or vector of values of parameter q\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nJaccard-related distinctivess measures\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:143\n\n\n\n\n\n\ngeneralisedrichness{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of richness\n\n\nCalculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0 for any\ndiversity measure (passed as the second argument). It also includes a\nsimilarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\ndiversity (at ecosystem level) or diversities (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:21\n\n\n\n\n\n\ngeneralisedrichness{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of richness\n\n\nCalculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0 for any\ndiversity measure (passed as the second argument). It also includes a\nsimilarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\ndiversity (at ecosystem level) or diversities (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:21\n\n\n\n\n\n\ngeneralisedshannon{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of Shannon entropy\n\n\nCalculates Shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nentropy (at ecosystem level) or entropies (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:62\n\n\n\n\n\n\ngeneralisedshannon{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of Shannon entropy\n\n\nCalculates Shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\n\n\nReturns:\n\n\n\n\nentropy (at ecosystem level) or entropies (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:62\n\n\n\n\n\n\ngeneralisedsimpson{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of Simpson's index\n\n\nCalculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity at q = 2 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nconcentration (at ecosystem level) or concentrations (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:102\n\n\n\n\n\n\ngeneralisedsimpson{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate a generalised version of Simpson's index\n\n\nCalculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity at q = 2 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species\n\n\nArguments:\n\n\n\n\n\n\nmeasure\n: diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)\n\n\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nZ\n: similarity matrix\n\n\n\n\nReturns:\n\n\n\n\nconcentration (at ecosystem level) or concentrations (of subcommunities)\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:102\n\n\n\n\n\n\njaccard{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate the Jaccard index\n\n\nCalculates Jaccard index (Jaccard similarity coefficient) of two\ncolumns representing independent subcommunity counts, which is\nDA(proportions, 0) / DG(proportions, 0) - 1\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nthe Jaccard index\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:163\n\n\n\n\n\n\nrichness{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate species richness of populations\n\n\nCalculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\ndiversities of subcommunities\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:40\n\n\n\n\n\n\nshannon{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate Shannon entropy of populations\n\n\nCalculates shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nentropies of subcommunities\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:81\n\n\n\n\n\n\nsimpson{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2}) \n\u00b6\n\n\nCalculate Simpson's index\n\n\nCalculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity (or\nconcentration) at q = 2\n\n\nArguments:\n\n\n\n\nproportions\n: population proportions\n\n\n\n\nReturns:\n\n\n\n\nconcentrations of subcommunities\n\n\n\n\nsource:\n\n\nDiversity/src/Ecology.jl:122", 
            "title": "Diversity.Ecology"
        }, 
        {
            "location": "/api/Diversity.Ecology/#diversityecology", 
            "text": "", 
            "title": "Diversity.Ecology"
        }, 
        {
            "location": "/api/Diversity.Ecology/#methods-exported", 
            "text": "generalisedjaccard(proportions::Array{T, 2},  qs)  \u00b6  Calculate a generalised version of the Jaccard index  Calculates a generalisation of the Jaccard index of a series of\ncolumns representing subcommunity counts. This evaluates to is DG / DA\nfor a series of orders, repesented as a vector of qs (or a single\nnumber).  It also includes a similarity matrix for the species. This\ngives measure of the average distinctiveness of the subcommunities.  Arguments:   proportions : population proportions  qs : single number or vector of values of parameter q  Z : similarity matrix   Returns:   Jaccard-related distinctivess measures   source:  Diversity/src/Ecology.jl:143    generalisedjaccard(proportions::Array{T, 2},  qs,  Z::Array{T, 2})  \u00b6  Calculate a generalised version of the Jaccard index  Calculates a generalisation of the Jaccard index of a series of\ncolumns representing subcommunity counts. This evaluates to is DG / DA\nfor a series of orders, repesented as a vector of qs (or a single\nnumber).  It also includes a similarity matrix for the species. This\ngives measure of the average distinctiveness of the subcommunities.  Arguments:   proportions : population proportions  qs : single number or vector of values of parameter q  Z : similarity matrix   Returns:   Jaccard-related distinctivess measures   source:  Diversity/src/Ecology.jl:143    generalisedrichness{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of richness  Calculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0 for any\ndiversity measure (passed as the second argument). It also includes a\nsimilarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions    Z : similarity matrix    Returns:   diversity (at ecosystem level) or diversities (of subcommunities)   source:  Diversity/src/Ecology.jl:21    generalisedrichness{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of richness  Calculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0 for any\ndiversity measure (passed as the second argument). It also includes a\nsimilarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions    Z : similarity matrix    Returns:   diversity (at ecosystem level) or diversities (of subcommunities)   source:  Diversity/src/Ecology.jl:21    generalisedshannon{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of Shannon entropy  Calculates Shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions    Z : similarity matrix    Returns:   entropy (at ecosystem level) or entropies (of subcommunities)   source:  Diversity/src/Ecology.jl:62    generalisedshannon{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of Shannon entropy  Calculates Shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions    Z : similarity matrix    Returns:   entropy (at ecosystem level) or entropies (of subcommunities)   source:  Diversity/src/Ecology.jl:62    generalisedsimpson{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of Simpson's index  Calculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity at q = 2 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions   Z : similarity matrix   Returns:   concentration (at ecosystem level) or concentrations (of subcommunities)   source:  Diversity/src/Ecology.jl:102    generalisedsimpson{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})  \u00b6  Calculate a generalised version of Simpson's index  Calculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity at q = 2 for\nany diversity measure (passed as the second argument). It also\nincludes a similarity matrix for the species  Arguments:    measure : diversity measure to use (one of D\u03b1, D\u1fb1, D\u03c1, D\u03c1\u0304, D\u03b3 or D\u03b3\u0304)    proportions : population proportions   Z : similarity matrix   Returns:   concentration (at ecosystem level) or concentrations (of subcommunities)   source:  Diversity/src/Ecology.jl:102    jaccard{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate the Jaccard index  Calculates Jaccard index (Jaccard similarity coefficient) of two\ncolumns representing independent subcommunity counts, which is\nDA(proportions, 0) / DG(proportions, 0) - 1  Arguments:   proportions : population proportions   Returns:   the Jaccard index   source:  Diversity/src/Ecology.jl:163    richness{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate species richness of populations  Calculates (species) richness of a series of columns representing\nindependent subcommunity counts, which is diversity at q = 0  Arguments:   proportions : population proportions   Returns:   diversities of subcommunities   source:  Diversity/src/Ecology.jl:40    shannon{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate Shannon entropy of populations  Calculates shannon entropy of a series of columns representing\nindependent subcommunity counts, which is log(diversity) at q = 1  Arguments:   proportions : population proportions   Returns:   entropies of subcommunities   source:  Diversity/src/Ecology.jl:81    simpson{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})  \u00b6  Calculate Simpson's index  Calculates Simpson's index of a series of columns representing\nindependent subcommunity counts, which is 1 / diversity (or\nconcentration) at q = 2  Arguments:   proportions : population proportions   Returns:   concentrations of subcommunities   source:  Diversity/src/Ecology.jl:122", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/Diversity.Hill/", 
            "text": "Diversity.Hill\n\n\nMethods [Exported]\n\n\n\n\n\n\nhillnumber(proportions,  qs) \n\u00b6\n\n\nCalculates Hill numbers\n\n\nCalculate the Hill number (or naive diversity) of order q of\npopulation(s) with given relative proportions\n\n\nArguments:\n\n\n\n\nproportions\n: relative proportions of different individuals / species\n                 in population (vector, or matrix where columns are\n                 individual populations) \n\n\nqs\n: single number or vector of orders of diversity measurement\n\n\n\n\nReturns:\n\n\n\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\nsource:\n\n\nDiversity/src/Hill.jl:18", 
            "title": "Diversity.Hill"
        }, 
        {
            "location": "/api/Diversity.Hill/#diversityhill", 
            "text": "", 
            "title": "Diversity.Hill"
        }, 
        {
            "location": "/api/Diversity.Hill/#methods-exported", 
            "text": "hillnumber(proportions,  qs)  \u00b6  Calculates Hill numbers  Calculate the Hill number (or naive diversity) of order q of\npopulation(s) with given relative proportions  Arguments:   proportions : relative proportions of different individuals / species\n                 in population (vector, or matrix where columns are\n                 individual populations)   qs : single number or vector of orders of diversity measurement   Returns:   Diversity of order qs (single number or vector of diversities)   source:  Diversity/src/Hill.jl:18", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/Diversity.Jost/", 
            "text": "Diversity.Jost\n\n\nMethods [Exported]\n\n\n\n\n\n\njostalpha{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculates Jost's alpha diversity\n\n\nCalculates Jost's alpha diversity of a series of columns representing\nindependent community counts, for a series of orders, repesented as a\nvector of qs. This is just the naive-community ecosystem diversity\ndivided by the naive-community beta diversity.\n\n\nArguments:\n\n\n\n\n\n\nproportions\n relative proportions of different individuals / species\n                in population (vector, or matrix where columns are\n                for individual sub-communities)\n\n\n\n\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing sub-communities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/Jost.jl:22\n\n\n\n\n\n\njostbeta{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number}) \n\u00b6\n\n\nCalculates Jost's beta diversity\n\n\nCalculates Jost's beta diversity of a series of columns representing\nindependent community counts, for a series of orders, repesented as a\nvector of qs. This is just the naive gamma diversity divided by\nJost's alpha diversity\n\n\nArguments:\n\n\n\n\n\n\nproportions\n relative proportions of different individuals / species\n                in population (vector, or matrix where columns are\n                for individual sub-communities)\n\n\n\n\n\n\nqs\n single number or vector of orders of diversity measurement\n\n\n\n\n\n\nReturns:\n\n\n\n\narray of diversities, first dimension representing sub-communities, and\n  last representing values of q\n\n\n\n\nsource:\n\n\nDiversity/src/Jost.jl:49", 
            "title": "Diversity.Jost"
        }, 
        {
            "location": "/api/Diversity.Jost/#diversityjost", 
            "text": "", 
            "title": "Diversity.Jost"
        }, 
        {
            "location": "/api/Diversity.Jost/#methods-exported", 
            "text": "jostalpha{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculates Jost's alpha diversity  Calculates Jost's alpha diversity of a series of columns representing\nindependent community counts, for a series of orders, repesented as a\nvector of qs. This is just the naive-community ecosystem diversity\ndivided by the naive-community beta diversity.  Arguments:    proportions  relative proportions of different individuals / species\n                in population (vector, or matrix where columns are\n                for individual sub-communities)    qs  single number or vector of orders of diversity measurement    Returns:   array of diversities, first dimension representing sub-communities, and\n  last representing values of q   source:  Diversity/src/Jost.jl:22    jostbeta{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})  \u00b6  Calculates Jost's beta diversity  Calculates Jost's beta diversity of a series of columns representing\nindependent community counts, for a series of orders, repesented as a\nvector of qs. This is just the naive gamma diversity divided by\nJost's alpha diversity  Arguments:    proportions  relative proportions of different individuals / species\n                in population (vector, or matrix where columns are\n                for individual sub-communities)    qs  single number or vector of orders of diversity measurement    Returns:   array of diversities, first dimension representing sub-communities, and\n  last representing values of q   source:  Diversity/src/Jost.jl:49", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/", 
            "text": "API-INDEX\n\n\nMODULE: Diversity\n\n\n\n\nFunctions [Exported]\n\n\nDiversity.Community\n  ### Community type, representing a single community\n\n\nDiversity.Ecosystem\n  ### Ecosystem type, representing an ecosystem of multiple subcommunities\n\n\n\n\nMethods [Exported]\n\n\nDA{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity\n\n\nDA{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity\n\n\nDB{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration\n\n\nDB{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration\n\n\nDB\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive supercommunity beta diversity / effective number of communities\n\n\nDB\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive supercommunity beta diversity / effective number of communities\n\n\nDG{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive supercommunity gamma diversity\n\n\nDG{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive supercommunity gamma diversity\n\n\nDR{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive supercommunity redundancy\n\n\nDR{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive supercommunity redundancy\n\n\nDR\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive supercommunity representativeness\n\n\nDR\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive supercommunity representativeness\n\n\nD\u0100{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive supercommunity alpha diversity\n\n\nD\u0100{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive supercommunity alpha diversity\n\n\nD\u03b1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity\n\n\nD\u03b1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity\n\n\nD\u03b2{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration\n\n\nD\u03b2{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration\n\n\nD\u03b2\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive subcommunity beta diversity\n\n\nD\u03b2\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive subcommunity beta diversity\n\n\nD\u03b3{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive subcommunity gamma diversity\n\n\nD\u03b3{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive subcommunity gamma diversity\n\n\nD\u03b3\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive subcommunity gamma diversity\n\n\nD\u03b3\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive subcommunity gamma diversity\n\n\nD\u03c1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Raw similarity-sensitive subcommunity redundancy\n\n\nD\u03c1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Raw similarity-sensitive subcommunity redundancy\n\n\nD\u03c1\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive subcommunity representativeness\n\n\nD\u03c1\u0304{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive subcommunity representativeness\n\n\nD\u1e20{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive supercommunity gamma diversity\n\n\nD\u1e20{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive supercommunity gamma diversity\n\n\nD\u1fb1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Normalised similarity-sensitive subcommunity alpha diversity)\n\n\nD\u1fb1{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Normalised similarity-sensitive subcommunity alpha diversity)\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculates subcommunity and supercommunity diversities\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculates subcommunity and supercommunity diversities\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool)\n  ### Calculates subcommunity and supercommunity diversities\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)\n  ### Calculates subcommunity and supercommunity diversities\n\n\ndiversity{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)\n  ### Calculates subcommunity and supercommunity diversities\n\n\nqDZ{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculates Leinster-Cobbold / similarity-sensitive diversity\n\n\nqDZ{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculates Leinster-Cobbold / similarity-sensitive diversity\n\n\nqD{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 1},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculates Hill / naive-similarity diversity\n\n\n\n\nTypes [Exported]\n\n\nDiversity.Collection{S\n:Diversity.Similarity, P\n:Diversity.Partition, FP\n:AbstractFloat}\n  ### Collection type, representing a collection of one or more subcommunities\n\n\nDiversity.GeneralSimilarity\n  ### A general matrix-based Similarity subtype\n\n\nDiversity.Onecommunity\n  ### Partition type allowing only one subcommunity\n\n\nDiversity.Subcommunity\n  ### Partition type with multiple subccomunities\n\n\nDiversity.Unique\n  ### A subtype of Similarity where all individuals are completely distinct\n\n\n\n\nTypealiass [Exported]\n\n\nSpecies\n  ### A subtype of Similarity where all species are completely distinct\n\n\n\n\nMethods [Internal]\n\n\ncall(::Type{Diversity.GeneralSimilarity},  Z::Array{Float64, 2})\n  ### Constructor for GeneralSimilarity\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculate diversity contributions from subcommunities\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool)\n  ### Calculate diversity contributions from subcommunities\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculate diversity contributions from subcommunities\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool)\n  ### Calculate diversity contributions from subcommunities\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)\n  ### Calculate diversity contributions from subcommunities\n\n\ncontributions{S\n:AbstractFloat, T\n:Number}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number},  perindividual::Bool,  Z::Array{S\n:AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)\n  ### Calculate diversity contributions from subcommunities\n\n\npowermean{S\n:Number, T\n:AbstractFloat, U\n:Number}(values::Array{S\n:Number, 1},  order::T\n:AbstractFloat,  weights::Array{U\n:Number, 1})\n  ### Calculates the weighted powermean of a series of numbers\n\n\npowermean{S\n:Number, T\n:AbstractFloat}(values::Array{S\n:Number, 1},  order::T\n:AbstractFloat)\n  ### Calculates the weighted powermean of a series of numbers\n\n\npowermean{S\n:Number}(values::Array{S\n:Number, 1})\n  ### Calculates the weighted powermean of a series of numbers\n\n\n\n\nTypes [Internal]\n\n\nDiversity.Partition\n  ### Abstract Partition supertype for all partitioning types\n\n\nDiversity.Similarity\n  ### Abstract Similarity supertype for all similarity measures\n\n\nMODULE: Diversity.Hill\n\n\n\n\nMethods [Exported]\n\n\nhillnumber(proportions,  qs)\n  ### Calculates Hill numbers\n\n\nMODULE: Diversity.Ecology\n\n\n\n\nMethods [Exported]\n\n\ngeneralisedjaccard(proportions::Array{T, 2},  qs)\n  ### Calculate a generalised version of the Jaccard index\n\n\ngeneralisedjaccard(proportions::Array{T, 2},  qs,  Z::Array{T, 2})\n  ### Calculate a generalised version of the Jaccard index\n\n\ngeneralisedrichness{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of richness\n\n\ngeneralisedrichness{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of richness\n\n\ngeneralisedshannon{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of Shannon entropy\n\n\ngeneralisedshannon{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of Shannon entropy\n\n\ngeneralisedsimpson{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of Simpson's index\n\n\ngeneralisedsimpson{S\n:AbstractFloat}(measure::Function,  proportions::Array{S\n:AbstractFloat, 2},  Z::Array{S\n:AbstractFloat, 2})\n  ### Calculate a generalised version of Simpson's index\n\n\njaccard{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate the Jaccard index\n\n\nrichness{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate species richness of populations\n\n\nshannon{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate Shannon entropy of populations\n\n\nsimpson{S\n:AbstractFloat}(proportions::Array{S\n:AbstractFloat, 2})\n  ### Calculate Simpson's index\n\n\nMODULE: Diversity.Jost\n\n\n\n\nMethods [Exported]\n\n\njostalpha{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculates Jost's alpha diversity\n\n\njostbeta{S\n:AbstractFloat, T\n:Number}(proportions::Array{S\n:AbstractFloat, 2},  qs::Union{Array{T\n:Number, 1}, T\n:Number})\n  ### Calculates Jost's beta diversity", 
            "title": "Index"
        }, 
        {
            "location": "/api/#api-index", 
            "text": "", 
            "title": "API-INDEX"
        }, 
        {
            "location": "/api/#module-diversity", 
            "text": "", 
            "title": "MODULE: Diversity"
        }, 
        {
            "location": "/api/#functions-exported", 
            "text": "Diversity.Community   ### Community type, representing a single community  Diversity.Ecosystem   ### Ecosystem type, representing an ecosystem of multiple subcommunities", 
            "title": "Functions [Exported]"
        }, 
        {
            "location": "/api/#methods-exported", 
            "text": "DA{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity  DA{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive supercommunity alpha diversity / naive-community diversity  DB{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration  DB{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive supercommunity beta diversity / distinctiveness / concentration  DB\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive supercommunity beta diversity / effective number of communities  DB\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive supercommunity beta diversity / effective number of communities  DG{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive supercommunity gamma diversity  DG{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive supercommunity gamma diversity  DR{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive supercommunity redundancy  DR{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive supercommunity redundancy  DR\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive supercommunity representativeness  DR\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive supercommunity representativeness  D\u0100{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive supercommunity alpha diversity  D\u0100{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive supercommunity alpha diversity  D\u03b1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity  D\u03b1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive subcommunity alpha diversity / naive-community diversity  D\u03b2{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration  D\u03b2{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive subcommunity beta diversity / distinctiveness / concentration  D\u03b2\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive subcommunity beta diversity  D\u03b2\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive subcommunity beta diversity  D\u03b3{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive subcommunity gamma diversity  D\u03b3{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive subcommunity gamma diversity  D\u03b3\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive subcommunity gamma diversity  D\u03b3\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive subcommunity gamma diversity  D\u03c1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Raw similarity-sensitive subcommunity redundancy  D\u03c1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Raw similarity-sensitive subcommunity redundancy  D\u03c1\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive subcommunity representativeness  D\u03c1\u0304{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive subcommunity representativeness  D\u1e20{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive supercommunity gamma diversity  D\u1e20{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive supercommunity gamma diversity  D\u1fb1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Normalised similarity-sensitive subcommunity alpha diversity)  D\u1fb1{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Normalised similarity-sensitive subcommunity alpha diversity)  diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculates subcommunity and supercommunity diversities  diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Calculates subcommunity and supercommunity diversities  diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool)   ### Calculates subcommunity and supercommunity diversities  diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)   ### Calculates subcommunity and supercommunity diversities  diversity{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)   ### Calculates subcommunity and supercommunity diversities  qDZ{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculates Leinster-Cobbold / similarity-sensitive diversity  qDZ{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number},  Z::Array{S :AbstractFloat, 2})   ### Calculates Leinster-Cobbold / similarity-sensitive diversity  qD{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 1},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculates Hill / naive-similarity diversity", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/#types-exported", 
            "text": "Diversity.Collection{S :Diversity.Similarity, P :Diversity.Partition, FP :AbstractFloat}   ### Collection type, representing a collection of one or more subcommunities  Diversity.GeneralSimilarity   ### A general matrix-based Similarity subtype  Diversity.Onecommunity   ### Partition type allowing only one subcommunity  Diversity.Subcommunity   ### Partition type with multiple subccomunities  Diversity.Unique   ### A subtype of Similarity where all individuals are completely distinct", 
            "title": "Types [Exported]"
        }, 
        {
            "location": "/api/#typealiass-exported", 
            "text": "Species   ### A subtype of Similarity where all species are completely distinct", 
            "title": "Typealiass [Exported]"
        }, 
        {
            "location": "/api/#methods-internal", 
            "text": "call(::Type{Diversity.GeneralSimilarity},  Z::Array{Float64, 2})   ### Constructor for GeneralSimilarity  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculate diversity contributions from subcommunities  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool)   ### Calculate diversity contributions from subcommunities  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2})   ### Calculate diversity contributions from subcommunities  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool)   ### Calculate diversity contributions from subcommunities  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool)   ### Calculate diversity contributions from subcommunities  contributions{S :AbstractFloat, T :Number}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number},  perindividual::Bool,  Z::Array{S :AbstractFloat, 2},  returnsupercommunity::Bool,  returnsubcommunity::Bool,  returnweights::Bool)   ### Calculate diversity contributions from subcommunities  powermean{S :Number, T :AbstractFloat, U :Number}(values::Array{S :Number, 1},  order::T :AbstractFloat,  weights::Array{U :Number, 1})   ### Calculates the weighted powermean of a series of numbers  powermean{S :Number, T :AbstractFloat}(values::Array{S :Number, 1},  order::T :AbstractFloat)   ### Calculates the weighted powermean of a series of numbers  powermean{S :Number}(values::Array{S :Number, 1})   ### Calculates the weighted powermean of a series of numbers", 
            "title": "Methods [Internal]"
        }, 
        {
            "location": "/api/#types-internal", 
            "text": "Diversity.Partition   ### Abstract Partition supertype for all partitioning types  Diversity.Similarity   ### Abstract Similarity supertype for all similarity measures", 
            "title": "Types [Internal]"
        }, 
        {
            "location": "/api/#module-diversityhill", 
            "text": "", 
            "title": "MODULE: Diversity.Hill"
        }, 
        {
            "location": "/api/#methods-exported_1", 
            "text": "hillnumber(proportions,  qs)   ### Calculates Hill numbers", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/#module-diversityecology", 
            "text": "", 
            "title": "MODULE: Diversity.Ecology"
        }, 
        {
            "location": "/api/#methods-exported_2", 
            "text": "generalisedjaccard(proportions::Array{T, 2},  qs)   ### Calculate a generalised version of the Jaccard index  generalisedjaccard(proportions::Array{T, 2},  qs,  Z::Array{T, 2})   ### Calculate a generalised version of the Jaccard index  generalisedrichness{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of richness  generalisedrichness{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of richness  generalisedshannon{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of Shannon entropy  generalisedshannon{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of Shannon entropy  generalisedsimpson{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of Simpson's index  generalisedsimpson{S :AbstractFloat}(measure::Function,  proportions::Array{S :AbstractFloat, 2},  Z::Array{S :AbstractFloat, 2})   ### Calculate a generalised version of Simpson's index  jaccard{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})   ### Calculate the Jaccard index  richness{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})   ### Calculate species richness of populations  shannon{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})   ### Calculate Shannon entropy of populations  simpson{S :AbstractFloat}(proportions::Array{S :AbstractFloat, 2})   ### Calculate Simpson's index", 
            "title": "Methods [Exported]"
        }, 
        {
            "location": "/api/#module-diversityjost", 
            "text": "", 
            "title": "MODULE: Diversity.Jost"
        }, 
        {
            "location": "/api/#methods-exported_3", 
            "text": "jostalpha{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculates Jost's alpha diversity  jostbeta{S :AbstractFloat, T :Number}(proportions::Array{S :AbstractFloat, 2},  qs::Union{Array{T :Number, 1}, T :Number})   ### Calculates Jost's beta diversity", 
            "title": "Methods [Exported]"
        }
    ]
}