var documenterSearchIndex = {"docs":
[{"location":"api/#Diversity.API","page":"Diversity.API","title":"Diversity.API","text":"","category":"section"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"The Diversity.API submodule provides the API that must be extended for new AbstractTypes, AbstractPartition and AbstractMetacommunity subtypes.","category":"page"},{"location":"api/#Usage","page":"Diversity.API","title":"Usage","text":"","category":"section"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"Providing additional code to extend the functionality of the system is simple:","category":"page"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"using Diversity\nusing Phylo\nimport Diversity.API: _counttypes\n\nfunction _counttypes(phy::Phylogeny)\n    return phy.nancestral\nend","category":"page"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"extends Diversity.API._counttypes() (and therefore the directly accessible counttypes() interface) to handle the Phylogeny subtype of AbstractTypes.","category":"page"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"","category":"page"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"Modules = [Diversity.API]\nPrivate = false","category":"page"},{"location":"api/#Diversity.API","page":"Diversity.API","title":"Diversity.API","text":"Diversity.API submodule\n\nThe Diversity.API submodule should be imported if you want to create a new type, partition or metacommunity subtype. Otherwise it can be ignored.\n\n\n\n\n\n","category":"module"},{"location":"api/#Diversity.API.AbstractMetacommunity","page":"Diversity.API","title":"Diversity.API.AbstractMetacommunity","text":"AbstractMetacommunity{FP <: AbstractFloat,\n                      ARaw <: AbstractArray,\n                      AProcessed <: AbstractMatrix{FP},\n                      Sim <: AbstractTypes,\n                      Part <: AbstractPartition}\n\nAbstractMetacommunity is the abstract supertype of all metacommunity types. AbstractMetacommunity subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities), and how to assess similarity between individuals within it.\n\n\n\n\n\n","category":"type"},{"location":"api/#Diversity.API.AbstractPartition","page":"Diversity.API","title":"Diversity.API.AbstractPartition","text":"AbstractPartition\n\nAbstract supertype for all partitioning types. AbstractPartition subtypes allow you to define how to partition your total metacommunity (e.g. an ecosystem) into smaller components (e.g. subcommunities).\n\n\n\n\n\n","category":"type"},{"location":"api/#Diversity.API.AbstractTypes","page":"Diversity.API","title":"Diversity.API.AbstractTypes","text":"AbstractTypes\n\nAbstract supertype for all similarity types. Its subtypes allow you to define how similarity is measured between individuals.\n\n\n\n\n\n","category":"type"},{"location":"api/#Diversity.API._addedoutputcols","page":"Diversity.API","title":"Diversity.API._addedoutputcols","text":"_addedoutputcols(::AbstractTypes)\n\nReturns the name of any additional columns needed to be added to outputs.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._calcabundance","page":"Diversity.API","title":"Diversity.API._calcabundance","text":"_calcabundance(t::AbstractTypes, a::AbstractArray)\n\nCalculates the abundance a for AbstractTypes, t (if necessary). May be implemented by each AbstractTypes subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._calcordinariness","page":"Diversity.API","title":"Diversity.API._calcordinariness","text":"_calcordinariness(t::AbstractTypes, a::AbstractArray, scale::Real)\n\nCalculates the ordinariness of abundance a from AbstractTypes, t. May be implemented by each AbstractTypes subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._calcsimilarity","page":"Diversity.API","title":"Diversity.API._calcsimilarity","text":"_calcsimilarity(t::AbstractTypes, scale::Real)\n\nRetrieves (and possibly calculates) a similarity matrix from t. Must be implemented by each AbstractTypes subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._countsubcommunities","page":"Diversity.API","title":"Diversity.API._countsubcommunities","text":"_countsubcommunities(::AbstractPartition)\n\nReturns number of subcommunities in a partition, p. May be implemented by each AbstractPartition subtype. Default is to count length of subcommunity name vector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._counttypes","page":"Diversity.API","title":"Diversity.API._counttypes","text":"_counttypes(::AbstractTypes, raw::Bool)\n\nReturns number of types in an AbstractTypes object, t. May be implemented by each AbstractTypes subtype. raw determines whether to count the number of raw or processed types, which varies, for instance, when the types are determined by a phylogeny. Default is to count length of corresponding types name vector.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getabundance","page":"Diversity.API","title":"Diversity.API._getabundance","text":"_getabundance(m::AbstractMetacommunity, raw::Bool)\n\nReturns the abundances array of the metacommunity. Must be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getaddedoutput","page":"Diversity.API","title":"Diversity.API._getaddedoutput","text":"_getaddedoutput(::AbstractTypes)\n\nReturns the name of any additional columns needed to be added to outputs.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getdiversityname","page":"Diversity.API","title":"Diversity.API._getdiversityname","text":"_getdiversityname(::AbstractTypes)\n\nReturns the name of the diversity type used to calculate.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getmetaabundance","page":"Diversity.API","title":"Diversity.API._getmetaabundance","text":"_getmetaabundance(m::AbstractMetacommunity, raw::Bool)\n\nReturns the metacommunity abundances of the metacommunity. May be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getmetaordinariness!","page":"Diversity.API","title":"Diversity.API._getmetaordinariness!","text":"_getmetaordinariness!(m::AbstractMetacommunity)\n\nReturns (and possibly calculates) the ordinariness of the metacommunity as a whole. May be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getordinariness!","page":"Diversity.API","title":"Diversity.API._getordinariness!","text":"_getordinariness!(m::AbstractMetacommunity)\n\nReturns (and possibly calculates) the ordinariness array of the subcommunities. May be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getpartition","page":"Diversity.API","title":"Diversity.API._getpartition","text":"_getpartition(::AbstractMetacommunity)\n\nReturns the AbstractPartition component of the metacommunity. Must be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getscale","page":"Diversity.API","title":"Diversity.API._getscale","text":"_getscale(m::AbstractMetacommunity)\n\nReturns a scaling factor for the metacommunity (needed for phylogenetics). Normally ignored. Must be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getsubcommunitynames","page":"Diversity.API","title":"Diversity.API._getsubcommunitynames","text":"_getsubcommunitynames(p::AbstractPartition)\n\nReturns the names of the subcommunities in the partition object. Must be implemented by each AbstractPartition subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._gettypenames","page":"Diversity.API","title":"Diversity.API._gettypenames","text":"_gettypenames(t::AbstractTypes, raw::Bool)\n\nReturns the names of the types in an AbstractTypes object. Must be implemented by each AbstractTypes subtype. raw determines whether to count the number of raw or processed types, which varies, for instance, when the types are determined by a phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._gettypes","page":"Diversity.API","title":"Diversity.API._gettypes","text":"_gettypes(::AbstractMetacommunity)\n\nReturns the AbstractTypes component of the metacommunity. Must be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API._getweight","page":"Diversity.API","title":"Diversity.API._getweight","text":"_getweight(m::AbstractMetacommunity)\n\nReturns the subcommunity weights of the metacommunity. May be implemented by each AbstractMetacommunity subtype.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API.floattypes","page":"Diversity.API","title":"Diversity.API.floattypes","text":"floattypes(t)\n\nThis function returns a set containing the floating point types that are compatible with the Diversity-related object, t.\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API.mcmatch","page":"Diversity.API","title":"Diversity.API.mcmatch","text":"mcmatch(procm::AbstractArray, sim::AbstractTypes, part::AbstractPartition)\n\nChecks for type and size compatibility for elements contributing to a Metacommunity\n\n\n\n\n\n","category":"function"},{"location":"api/#Diversity.API.typematch-Tuple","page":"Diversity.API","title":"Diversity.API.typematch","text":"typematch(args...)\n\nChecks whether the types of a variety of Diversity-related objects have compatible types (using floattypes()).\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"Diversity.API","title":"Diversity.API","text":"","category":"page"},{"location":"ecology/#Diversity.Ecology","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"","category":"section"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"In the Diversity.Ecology submodule, we replicate old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and ecosystem measures. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).","category":"page"},{"location":"ecology/#Usage","page":"Diversity.Ecology","title":"Usage","text":"","category":"section"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"Accessing the functionality in the package is simple:","category":"page"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"julia> using Diversity.Ecology, LinearAlgebra\n\njulia> community = [10, 20, 20];\n\njulia> community = community ./ sum(community); # Convert counts to proportions\n\njulia> diversity = simpson(community)\n1×7 DataFrame\n Row │ div_type  measure  type_level  type_name  partition_level  partition_name  diversity \n     │ String    String   String      String     String           String          Float64   \n─────┼──────────────────────────────────────────────────────────────────────────────────────\n   1 │ Unique    Simpson  types                  subcommunity     1                    0.36\n\njulia> ecosystem = [2 2 0; 0 2 2]';\n\njulia> ecosystem = ecosystem ./ sum(ecosystem);\n\njulia> jaccard(ecosystem)\n1×8 DataFrame\n Row │ div_type  measure  q      type_level  type_name  partition_level  partition_name  diversity \n     │ String    String   Int64  String      String     String           String          Float64   \n─────┼─────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Unique    Jaccard      0  types                  metacommunity                     0.333333\n\njulia> generalisedjaccard(ecosystem, [0, 1, 2])\n3×8 DataFrame\n Row │ div_type     measure  q      type_level  type_name  partition_level  partition_name  diversity \n     │ String       String   Int64  String      String     String           String          Float64   \n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Arbitrary Z  Jaccard      0  types                  metacommunity                     0.333333\n   2 │ Arbitrary Z  Jaccard      1  types                  metacommunity                     0.414214\n   3 │ Arbitrary Z  Jaccard      2  types                  metacommunity                     0.5\n\njulia> generalisedjaccard(ecosystem, [0, 1, 2], Matrix(1.0I, 3, 3))\n3×8 DataFrame\n Row │ div_type     measure  q      type_level  type_name  partition_level  partition_name  diversity \n     │ String       String   Int64  String      String     String           String          Float64   \n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Arbitrary Z  Jaccard      0  types                  metacommunity                     0.333333\n   2 │ Arbitrary Z  Jaccard      1  types                  metacommunity                     0.414214\n   3 │ Arbitrary Z  Jaccard      2  types                  metacommunity                     0.5\n\njulia> community = [0.7, 0.2, 0.1];\n\njulia> pielou(community)\n1×7 DataFrame\n Row │ div_type  measure  type_level  type_name  partition_level  partition_name  diversity \n     │ String    String   String      String     String           String          Float64   \n─────┼──────────────────────────────────────────────────────────────────────────────────────\n   1 │ Unique    Pielou   types                  subcommunity     1                0.729847\n\njulia> communitymat = [10 20 30 20 0; #5 sites/subcommunities (columns) and 6 species (rows)\n                       10 0 50 80 10;\n                       60 10 90 0 0; \n                       10 10 10 10 10;\n                       70 70 70 70 70;\n                       10 0 0 90 0];\n\njulia> generalisedpielou(subcommunityDiversity, communitymat)\n5×7 DataFrame\n Row │ div_type     measure  type_level  type_name  partition_level  partition_name  diversity \n     │ String       String   String      String     String           String          Float64   \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Arbitrary Z  Pielou   types                  subcommunity     1                0.781115\n   2 │ Arbitrary Z  Pielou   types                  subcommunity     2                0.745557\n   3 │ Arbitrary Z  Pielou   types                  subcommunity     3                0.888073\n   4 │ Arbitrary Z  Pielou   types                  subcommunity     4                0.864562\n   5 │ Arbitrary Z  Pielou   types                  subcommunity     5                0.622366\n\njulia> generalisedpielou(metacommunityDiversity, communitymat)\n1×7 DataFrame\n Row │ div_type     measure  type_level  type_name  partition_level  partition_name  diversity \n     │ String       String   String      String     String           String          Float64   \n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Arbitrary Z  Pielou   types                  metacommunity                     0.510146","category":"page"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"","category":"page"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"Modules = [Diversity.Ecology]\nPrivate = false","category":"page"},{"location":"ecology/#Diversity.Ecology","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"Diversity.Ecology submodule\n\nThe Diversity.Ecology module replicates old ecological diversity measures and generalised versions of them that relate to our general measures of alpha, beta and gamma diversity at subcommunity and metacommunity levels. The generalisations of the richness, Shannon and Simpson are the only standard measures we are aware of whose subcommunity components sum directly to the corresponding ecosystem measure (although note that Simpson's index decreases for increased diversity, so small components are more diverse).\n\n\n\n\n\n","category":"module"},{"location":"ecology/#Diversity.Ecology.generalisedjaccard","page":"Diversity.Ecology","title":"Diversity.Ecology.generalisedjaccard","text":"generalisedjaccard(proportions::AbstractArray, qs, Z::AbstractMatrix)\ngeneralisedjaccard(proportions::AbstractArray, qs, sim::AbstractTypes)\ngeneralisedjaccard(meta::AbstractAssemblage, qs)\n\nCalculates a generalisation of the Jaccard similarity of two columns representing the counts of two subcommunities. This evaluates to raw alpha / gamma - 1 for a series of orders, repesented as a vector of qs (or a single number). It also includes an optional similarity matrix for the species. This gives a measure of the distinctness of the subcommunities, though we believe that beta and normalised beta have better properties.\n\nArguments:\n\nproportions: population proportions\nmeta: metacommunity / assemblage\nZ: similarity matrix or\nsim: instance of AbstractTypes\n\nReturns:\n\nJaccard-related distinctivess measures\n\n\n\n\n\n","category":"function"},{"location":"ecology/#Diversity.Ecology.generalisedrichness","page":"Diversity.Ecology","title":"Diversity.Ecology.generalisedrichness","text":"generalisedrichness(level::DiversityLevel, proportions::AbstractArray,\n                    Z::AbstractMatrix)\ngeneralisedrichness(level::DiversityLevel, proportions::AbstractArray,\n                    sim::AbstractTypes)\n\nCalculates species richness (diversity at q = 0) of a series of columns representing subcommunity counts, allowing a similarity matrix for the types / species.\n\nArguments:\n\nlevel: DiversityLevel to calculate at (e.g. subcommunityDiversity)\nproportions: population proportions\nZ: similarity matrix or\nsim: instance of AbstractTypes\n\nReturns:\n\ndiversity (at ecosystem level) or diversities (of subcommunities)\n\n\n\n\n\n","category":"function"},{"location":"ecology/#Diversity.Ecology.generalisedshannon","page":"Diversity.Ecology","title":"Diversity.Ecology.generalisedshannon","text":"generalisedshannon(level::DiversityLevel, proportions::AbstractArray,\n                   Z::AbstractMatrix)\ngeneralisedshannon(level::DiversityLevel, proportions::AbstractArray,\n                   sim::AbstractTypes)\n\nCalculates Shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.\n\nArguments:\n\nlevel: DiversityLevel to calculate at (e.g. subcommunityDiversity)\nproportions: population proportions\nZ: similarity matrix or\nsim: instance of AbstractTypes\n\nReturns:\n\nentropy (at metacommunity level) or entropies (of subcommunities)\n\n\n\n\n\n","category":"function"},{"location":"ecology/#Diversity.Ecology.generalisedsimpson","page":"Diversity.Ecology","title":"Diversity.Ecology.generalisedsimpson","text":"generalisedsimpson(level::DiversityLevel, proportions::AbstractArray,\n                   Z::AbstractMatrix)\ngeneralisedsimpson(level::DiversityLevel, proportions::AbstractArray,\n                   sim::AbstractTypes)\n\nCalculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts, allowing a similarity matrix for the types / species.\n\nArguments:\n\nlevel: DiversityLevel to calculate at (e.g. subcommunityDiversity)\nproportions: population proportions\nZ: similarity matrix or\nsim: instance of AbstractTypes\n\nReturns:\n\nconcentration (at ecosystem level) or concentrations (of subcommunities)\n\n\n\n\n\n","category":"function"},{"location":"ecology/#Diversity.Ecology.gower","page":"Diversity.Ecology","title":"Diversity.Ecology.gower","text":"gower(proportions::AbstractMatrix; countzeros::Bool = false, logscale::Bool = true)\ngower(asm::AbstractAssemblage; countzeros::Bool = false, logscale::Bool = true)\n\nCalculates Gower's dissimarity of up to two columns representing independent subcommunity counts.\n\nArguments:\n\nproportions: population proportions; or\ncount: population counts; or\nasm: Abstract Assemblage\n``\n\nReturns:\n\nGower dissimilarity of the subcommunities\n\n\n\n\n\n","category":"function"},{"location":"ecology/#Diversity.Ecology.jaccard-Tuple{AbstractMatrix}","page":"Diversity.Ecology","title":"Diversity.Ecology.jaccard","text":"jaccard(proportions::AbstractMatrix)\njaccard(asm::AbstractAssemblage)\n\nCalculates Jaccard similarity coefficient of two columns representing independent subcommunity counts\n\nArguments:\n\nproportions: population proportions\nasm: assemblage / metacommunity\n\nReturns:\n\nthe Jaccard index\n\n\n\n\n\n","category":"method"},{"location":"ecology/#Diversity.Ecology.pielou-Tuple{AbstractVecOrMat}","page":"Diversity.Ecology","title":"Diversity.Ecology.pielou","text":"pielou(proportions::AbstractMatrix)\npielou(asm::AbstractAssemblage)\n\nCalculates Pielou's evenness of a series of columns representing independent subcommunity counts.\n\nArguments:\n\nproportions: population proportions\n\nReturns:\n\nevenness of subcommunities\n\nExample:\n\ncommunitymat = [10 20 30 20 0;\n                10 0 50 80 10;\n                60 10 90 0 0; \n                10 10 10 10 10;\n                70 70 70 70 70;\n                10 0 0 90 0];\n\npielou(communitymat)\n\n\n\n\n\n","category":"method"},{"location":"ecology/#Diversity.Ecology.richness-Tuple{AbstractVecOrMat}","page":"Diversity.Ecology","title":"Diversity.Ecology.richness","text":"richness(proportions::AbstractMatrix)\n\nCalculates species richness (diversity at q = 0) of a series of columns representing independent subcommunity counts.\n\nArguments:\n\nproportions: population proportions\n\nReturns:\n\ndiversities of subcommunities\n\n\n\n\n\n","category":"method"},{"location":"ecology/#Diversity.Ecology.shannon-Tuple{AbstractVecOrMat}","page":"Diversity.Ecology","title":"Diversity.Ecology.shannon","text":"shannon(proportions::AbstractVecOrMat)\n\nCalculates shannon entropy (log of diversity at q = 1) of a series of columns representing independent subcommunity counts.\n\nArguments:\n\nproportions: population proportions\n\nReturns:\n\nentropies of subcommunities\n\n\n\n\n\n","category":"method"},{"location":"ecology/#Diversity.Ecology.simpson-Tuple{AbstractVecOrMat}","page":"Diversity.Ecology","title":"Diversity.Ecology.simpson","text":"simpson(proportions::AbstractMatrix)\n\nCalculates Simpson's index (1 / diversity at q = 2) of a series of columns representing independent subcommunity counts.\n\nArguments:\n\nproportions: population proportions\n\nReturns:\n\nconcentrations of subcommunities\n\n\n\n\n\n","category":"method"},{"location":"ecology/","page":"Diversity.Ecology","title":"Diversity.Ecology","text":"","category":"page"},{"location":"hill/#Diversity.Hill","page":"Diversity.Hill","title":"Diversity.Hill","text":"","category":"section"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"Hill numbers are found in the Diversity.Hill submodule.","category":"page"},{"location":"hill/#Usage","page":"Diversity.Hill","title":"Usage","text":"","category":"section"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"Accessing the main functionality in the package is simple:","category":"page"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"julia> using Diversity.Hill\n\njulia> community = [10, 20, 20, 0, 3];\n\njulia> community ./= sum(community);\n\njulia> diversities = hillnumber(community, [0, 1, 2])\n3×7 DataFrame\n Row │ measure     q      type_level  type_name  partition_level  partition_name  diversity \n     │ String      Int64  String      String     String           String          Float64   \n─────┼──────────────────────────────────────────────────────────────────────────────────────\n   1 │ HillNumber      0  types                  subcommunity     1                 4.0\n   2 │ HillNumber      1  types                  subcommunity     1                 3.36264\n   3 │ HillNumber      2  types                  subcommunity     1                 3.09021","category":"page"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"","category":"page"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"Modules = [Diversity.Hill]\nPrivate = false","category":"page"},{"location":"hill/#Diversity.Hill","page":"Diversity.Hill","title":"Diversity.Hill","text":"Diversity.Hill submodule\n\nHill numbers are found in the Diversity.Hill package.\n\n\n\n\n\n","category":"module"},{"location":"hill/#Diversity.Hill.hillnumber-Tuple{Any, Any}","page":"Diversity.Hill","title":"Diversity.Hill.hillnumber","text":"hillnumber(proportions, qs)\n\nCalculate the Hill number (or naive diversity) of order q of population(s) with given relative proportions\n\nArguments:\n\nproportions: relative proportions of different individuals / species                in population (vector, or matrix where columns are                individual populations)\nqs: single number or vector of orders of diversity measurement\n\nReturns:\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\n\n","category":"method"},{"location":"hill/","page":"Diversity.Hill","title":"Diversity.Hill","text":"","category":"page"},{"location":"#Diversity.jl","page":"Diversity.jl","title":"Diversity.jl","text":"","category":"section"},{"location":"#A-package-for-measuring-and-partitioning-diversity","page":"Diversity.jl","title":"A package for measuring and partitioning diversity","text":"","category":"section"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"The main Diversity package provides basic numbers-equivalent diversity measures (described in Hill, 1973), similarity-sensitive diversity measures (generalised from Hill, and described in Leinster and Cobbold, 2012), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in Reeve et al, 2014). The diversity functions exist both with unicode names (e.g. ᾱ()), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. NormalisedAlpha()), which are. We also provide functions to calculate appropriate subdiv() and metadiv() values for each measure, a general diversity() function for extract any diversity measure at a series of scales.","category":"page"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"Accessing the main functionality in the package is simple:","category":"page"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"julia> # Load the package into R\n       using Diversity\n\njulia> # Example population\n       pop = [1 1 0; 2 0 0; 3 1 4];\n\njulia> pop = pop ./ sum(pop);\n\njulia> # Create Metacommunity object\n       meta = Metacommunity(pop);\n\njulia> diversities = norm_meta_alpha(meta, [0, 1, 2, Inf])\n4×8 DataFrame\n Row │ div_type  measure          q        type_level  type_name  partition_level  partition_name  diversity \n     │ String    String           Float64  String      String     String           String          Float64   \n─────┼───────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Unique    NormalisedAlpha      0.0  types                  metacommunity                      2.16667\n   2 │ Unique    NormalisedAlpha      1.0  types                  metacommunity                      1.86121\n   3 │ Unique    NormalisedAlpha      2.0  types                  metacommunity                      1.63636\n   4 │ Unique    NormalisedAlpha    Inf    types                  metacommunity                      1.0\n\njulia> Z = [1.0 0 0; 0 1 1; 1 1 1];\n\njulia> meta_z = Metacommunity(pop, Z);\n\njulia> rho = RawRho(meta_z);\n\njulia> redundancies = subdiv(rho, 2)\n3×8 DataFrame\n Row │ div_type     measure  q      type_level  type_name  partition_level  partition_name  diversity \n     │ String       String   Int64  String      String     String           String          Float64   \n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Arbitrary Z  RawRho       2  types                  subcommunity     1                     2.0\n   2 │ Arbitrary Z  RawRho       2  types                  subcommunity     2                     3.0\n   3 │ Arbitrary Z  RawRho       2  types                  subcommunity     3                     3.0","category":"page"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"","category":"page"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"Modules = [Diversity, Diversity.ShortNames]\nPrivate = false","category":"page"},{"location":"#Diversity.Diversity","page":"Diversity.jl","title":"Diversity.Diversity","text":"Diversity package\n\nThe main Diversity package provides basic numbers-equivalent diversity measures (described in Hill, 1973), similarity-sensitive diversity measures (generalised from Hill, and described in Leinster and Cobbold, 2012), and related alpha, beta and gamma diversity measures at the level of the metacommunity and its component subcommunities (generalised in turn from Leinster and Cobbold, and described in Reeve et al, 2014). The diversity functions exist both with unicode names (e.g. ᾱ()), which are not automatically exported (as we feel they are too short) and with matching longer ASCII names (e.g. NormalisedAlpha()), which are. We also provide functions to calculate appropriate subcommunityDiversity() and metacommunityDiversity() values for each measure, a general diversity() function for extract any diversity measure at a series of scales.\n\n\n\n\n\n","category":"module"},{"location":"#Diversity.individualDiversity","page":"Diversity.jl","title":"Diversity.individualDiversity","text":"Generates the function to calculate individual diversities\n\nGenerates the function to calculate individual diversities for a series of orders, represented as a vector of qs.\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nFunction which takes a single number or vector of values of parameter q, and returns the individual diversities for those values.\n\n\n\n\n\n","category":"constant"},{"location":"#Diversity.metacommunityDiversity","page":"Diversity.jl","title":"Diversity.metacommunityDiversity","text":"Generates the function to calculate metacommunity diversity\n\nGenerates the function to calculate metacommunity diversity for a series of orders, represented as a vector of qs.\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nFunction which takes a single number or vector of values of parameter q, and returns the metacommunity diversities for those values.\n\n\n\n\n\n","category":"constant"},{"location":"#Diversity.subcommunityDiversity","page":"Diversity.jl","title":"Diversity.subcommunityDiversity","text":"Generates the function to calculate subcommunity diversity\n\nGenerates the function to calculate subcommunity diversity for a series of orders, represented as a vector of qs.\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nFunction which takes a single number or vector of values of parameter q, and returns the subcommunity diversities for those values.\n\n\n\n\n\n","category":"constant"},{"location":"#Diversity.DiversityLevel","page":"Diversity.jl","title":"Diversity.DiversityLevel","text":"Enumeration of levels that can exist / be calculated for a metacommunity.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.DiversityMeasure","page":"Diversity.jl","title":"Diversity.DiversityMeasure","text":"DiversityMeasure\n\nThis type is the abstract supertype of all diversity measure types. DiversityMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Gamma","page":"Diversity.jl","title":"Diversity.Gamma","text":"Gamma\n\nCalculates gamma diversity (γ) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.GeneralTypes","page":"Diversity.jl","title":"Diversity.GeneralTypes","text":"GeneralTypes{FP, M}\n\nAn AbstractTypes subtype with a general similarity matrix. This subtype simply holds a matrix with similarities between individuals.\n\nMembers:\n\nz A two-dimensional matrix representing similarity between\n\nindividuals.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Metacommunity","page":"Diversity.jl","title":"Diversity.Metacommunity","text":"Metacommunity{FP, ARaw, AProcessed, Part, Sim}\n\nMetacommunity type, representing a whole metacommunity containing a single community or a collection of subcommunities. The metacommunity of individuals may be further partitioned into smaller groups. For instance this may be an ecosystem, which consists of a series of subcommunities. The AbstractPartition subtype within it stores relative abundances of different types, e.g. species, and also allows for similarity between individuals.\n\nConstructor:\n\nMetacommunity(abundances::AbstractArray,               part::AbstractPartition,               types::AbstractTypes)\n\nMembers:\n\nabundances the abundance matrix for the metacommunity.\npartition the instance of the AbstractPartition subtype, containing the subcommunities.\ntypes The instance of the AbstractTypes subtype, from which similarities between individuals can be calculated.\nordinariness A cache of the ordinariness of the individuals in the Partition. Should only be accessed through getordinariness!(::Metacommunity), which will populate the cache if it has not yet been calculated.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.NormalisedAlpha","page":"Diversity.jl","title":"Diversity.NormalisedAlpha","text":"NormalisedAlpha\n\nCalculates normalised alpha diversity (ᾱ) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.NormalisedBeta","page":"Diversity.jl","title":"Diversity.NormalisedBeta","text":"NormalisedBeta\n\nCalculates normalised beta diversity (β̄) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.NormalisedRho","page":"Diversity.jl","title":"Diversity.NormalisedRho","text":"NormalisedRho\n\nCalculates redundancy (ρ̄, normalised beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Onecommunity","page":"Diversity.jl","title":"Diversity.Onecommunity","text":"Onecommunity\n\nAbstractPartition subtype containing only one subcommunity.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.PowerMeanMeasure","page":"Diversity.jl","title":"Diversity.PowerMeanMeasure","text":"PowerMeanMeasure\n\nThis abstract DiversityMeasure subtype is the supertype of all diversity measures which are straight power means. PowerMeanMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.RawAlpha","page":"Diversity.jl","title":"Diversity.RawAlpha","text":"RawAlpha\n\nCalculates raw alpha diversity (α) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.RawBeta","page":"Diversity.jl","title":"Diversity.RawBeta","text":"RawBeta\n\nCalculates distinctiveness (β, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of RelativeEntropyMeasure, meaning that subcommunity and type composite diversity measures are relative entropies, and their composite types are powermeans of those measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.RawRho","page":"Diversity.jl","title":"Diversity.RawRho","text":"RawRho\n\nCalculates redundancy (ρ, raw beta diversity) of all of the individuals in a metacommunity, and caches them for subsequent analysis. This is a subtype of PowerMeanMeasure, meaning that all composite diversity measures are simple powermeans of the individual measures.\n\nConstructor arguments:\n\nmeta: a Metacommunity\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.RelativeEntropyMeasure","page":"Diversity.jl","title":"Diversity.RelativeEntropyMeasure","text":"RelativeEntropyMeasure\n\nThis abstract DiversityMeasure subtype is the supertype of all diversity measures which are relative entropy-based diversity measures. RelativeEntropyMeasure subtypes allow you to calculate and cache any kind of diversity of a metacommunity.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Species","page":"Diversity.jl","title":"Diversity.Species","text":"Species\n\nA subtype of AbstractTypes where all species are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all species as unique and completely distinct from each other.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Subcommunities","page":"Diversity.jl","title":"Diversity.Subcommunities","text":"Subcommunities(num)\n\nAbstractPartition subtype with multiple subcommunities.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.Taxonomy","page":"Diversity.jl","title":"Diversity.Taxonomy","text":"Taxonomy\n\nA subtype of AbstractTypes with similarity between related taxa, creating taxonomic similarity matrices.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.UniqueTypes","page":"Diversity.jl","title":"Diversity.UniqueTypes","text":"UniqueTypes\n\nA subtype of AbstractTypes where all individuals are completely distinct. This type is the simplest AbstractTypes subtype, which identifies all individuals as unique and completely distinct from each other.\n\n\n\n\n\n","category":"type"},{"location":"#Diversity.addedoutputcols","page":"Diversity.jl","title":"Diversity.addedoutputcols","text":"addedoutputcols(m::AbstractAssemblage)\naddedoutputcols(t::AbstractTypes)\n\nReturns the name of any additional columns needed to disambiguate the diversity type used.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.calcsimilarity-Tuple{Diversity.API.AbstractTypes, Real}","page":"Diversity.jl","title":"Diversity.calcsimilarity","text":"calcsimilarity(t::AbstractTypes, scale::Real)\n\nRetrieves (and possibly calculates) a similarity matrix from t.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.countsubcommunities","page":"Diversity.jl","title":"Diversity.countsubcommunities","text":"countsubcommunities(m::AbstractAssemblage)\ncountsubcommunities(p::AbstractPartition)\n\nReturns number of subcommunities in an AbstractPartition object or the AbstractAssemblage containing it.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.counttypes","page":"Diversity.jl","title":"Diversity.counttypes","text":"counttypes(m::AbstractAssemblage[, raw::Bool = false])\ncounttypes(t::AbstractTypes[, raw::Bool = false])\n\nReturns number of types in an AbstractTypes object or the AbstractAssemblage containing it. raw determines whether to count the number of raw or processed types, which varies, for instance, when the types are determined by a phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.diversity-Tuple{Any, Any, EcoBase.AbstractAssemblage, Any}","page":"Diversity.jl","title":"Diversity.diversity","text":"Calculates subcommunity and metacommunity diversities\n\nCalculates any diversity of a Metacommunity for a series of orders, repesented as one or a vector of qs.\n\nArguments:\n\ndls: an iterable collection of DiversityLevels\ndms: an iterable collection of DiversityMeasures\nmeta: a Metacommunity\nqs: single number or vector of values of parameter q\n\nReturns:\n\nA vector containing all of the diversity levels of all of the requested diversities.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getASCIIName-Tuple{DiversityMeasure}","page":"Diversity.jl","title":"Diversity.getASCIIName","text":"getASCIIName(dm::DiversityMeasure)\n\nReturn the ASCII name of the DiversityMeasure\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nString containing simple ASCII name of DiversityMeasure\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getFullName","page":"Diversity.jl","title":"Diversity.getFullName","text":"getFullName(dm::DiversityMeasure)\n\nReturn the full name of the DiversityMeasure.\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nString containing full descriptive name of DiversityMeasure\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getName","page":"Diversity.jl","title":"Diversity.getName","text":"getName(dm::DiversityMeasure)\n\nReturn the character corresponding to the DiversityMeasure.\n\nArguments:\n\ndm: DiversityMeasure\n\nReturns:\n\nString containing unicode (greek) name of DiversityMeasure.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getabundance","page":"Diversity.jl","title":"Diversity.getabundance","text":"getabundance(m::AbstractAssemblage, raw::Bool)\n\nReturns the abundances array of the metacommunity.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getaddedoutput","page":"Diversity.jl","title":"Diversity.getaddedoutput","text":"getaddedoutput(::AbstractTypes)\n\nReturns the contents of any additional columns to be added to outputs.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getdiversityname","page":"Diversity.jl","title":"Diversity.getdiversityname","text":"getdiversityname(m::AbstractAssemblage)\ngetdiversityname(t::AbstractTypes)\n\nReturns the name of the diversity type used.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getmetaabundance","page":"Diversity.jl","title":"Diversity.getmetaabundance","text":"getmetaabundance(m::AbstractAssemblage)\n\nReturns the metacommunity abundances of the metacommunity.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.getmetaordinariness!-Tuple{EcoBase.AbstractAssemblage}","page":"Diversity.jl","title":"Diversity.getmetaordinariness!","text":"getmetaordinariness!(m::AbstractAssemblage)\n\nReturns (and possibly calculates) the ordinariness of the metacommunity as a whole.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getordinariness!-Tuple{EcoBase.AbstractAssemblage}","page":"Diversity.jl","title":"Diversity.getordinariness!","text":"getordinariness!(m::AbstractAssemblage)\n\nReturns (and possibly calculates) the ordinariness array of the subcommunities.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getpartition-Tuple{EcoBase.AbstractAssemblage}","page":"Diversity.jl","title":"Diversity.getpartition","text":"getpartition(m::AbstractAssemblage)\n\nReturns the AbstractPartition component of the metacommunity.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getsubcommunitynames","page":"Diversity.jl","title":"Diversity.getsubcommunitynames","text":"getsubcommunitynames(m::AbstractAssemblage)\ngetsubcommunitynames(p::AbstractPartition)\n\nReturns the names of the subcommunities in an AbstractPartition object or the AbstractAssemblage containing it.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.gettypenames","page":"Diversity.jl","title":"Diversity.gettypenames","text":"gettypenames(m::AbstractAssemblage[, raw::Bool = false])\ngettypenames(t::AbstractTypes[, raw::Bool = false])\n\nReturns the names of the types of the AbstractTypes object or the AbstractAssemblage containing it. raw determines whether to count the number of raw or processed types, which varies, for instance, when the types are determined by a phylogeny.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.gettypes-Tuple{EcoBase.AbstractAssemblage}","page":"Diversity.jl","title":"Diversity.gettypes","text":"gettypes(m::AbstractAssemblage)\n\nReturns the AbstractTypes component of the metacommunity.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.getweight-Tuple{EcoBase.AbstractAssemblage}","page":"Diversity.jl","title":"Diversity.getweight","text":"getweight(m::AbstractAssemblage)\n\nReturns the subcommunity weights of the metacommunity.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.hassimilarity","page":"Diversity.jl","title":"Diversity.hassimilarity","text":"hassimilarity(t::AbstractAssemblage)\nhassimilarity(t::AbstractThings)\n\nIs there similarity of some non-trivial type in the object?\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.inddiv","page":"Diversity.jl","title":"Diversity.inddiv","text":"inddiv(measure::DiversityMeasure, q::Real)\ninddiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\nTakes a diversity measure and single order or vector of orders, and returns a DataFrame containing the individual diversities for those values.\n\nArguments:\n\ndm: DiversityMeasure\nq / qs: a single order or a vector of orders\n\nReturns:\n\nReturns individual diversities of dm for a single order q or a vector of order qs.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.metadiv","page":"Diversity.jl","title":"Diversity.metadiv","text":"metadiv(measure::DiversityMeasure, q::Real)\nmetadiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the metacommunity diversities for those values.\n\nArguments:\n\ndm: DiversityMeasure\nq / qs: a single order or a vector of orders\n\nReturns:\n\nReturns metacommunity diversities of dm for a single order q or a vector of order qs.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.qD","page":"Diversity.jl","title":"Diversity.qD","text":"qD\n\nCalculates Hill / naive-similarity diversity of order(s) qs of a population with given relative proportions.\n\nArguments:\n\nproportions: relative proportions of different types in population\nqs: single number or vector of orders of diversity measurement\n\nReturns:\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.qDZ","page":"Diversity.jl","title":"Diversity.qDZ","text":"qDZ\n\nCalculates Leinster-Cobbold / similarity-sensitive diversity of >= 1 order(s) qs of a population with given relative proportions, and similarity matrix Z.\n\nArguments:\n\nproportions: relative proportions of different types in a population\nqs: single number or vector of orders of diversity measurement\nZ: similarity matrix\n\nReturns:\n\nDiversity of order qs (single number or vector of diversities)\n\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.subdiv","page":"Diversity.jl","title":"Diversity.subdiv","text":"subdiv(measure::DiversityMeasure, q::Real)\nsubdiv(measure::DiversityMeasure, qs::AbstractVector{Real})\n\nTakes a diversity measure and single order or vector of orders, and calculates and returns the subcommunity diversities for those values.\n\nArguments:\n\ndm: DiversityMeasure\nq / qs: a single order or a vector of orders\n\nReturns:\n\nReturns subcommunity diversities of dm for a single order q or a vector of order qs.\n\n\n\n\n\n","category":"function"},{"location":"#Diversity.ShortNames","page":"Diversity.jl","title":"Diversity.ShortNames","text":"Diversity.ShortNames submodule\n\nWe do not directly export ᾱ, α, β̄, β, ρ̄, ρ, γ as they're too short. γ actually can't be exported like this - it'll always just be Shortnames.γ, so we export Γ instead.\n\nAll of these can only be accessed via Diversity.ShortNames.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"Private functions in module Diversity:","category":"page"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"Modules = [Diversity]\nPublic = false","category":"page"},{"location":"#Diversity._getmeta-Tuple{DiversityMeasure}","page":"Diversity.jl","title":"Diversity._getmeta","text":"_getmeta(dm::DiversityMeasure)\n\nReturn the metacommunity belonging to the DiversityMeasure.\n\n\n\n\n\n","category":"method"},{"location":"#Diversity.powermean","page":"Diversity.jl","title":"Diversity.powermean","text":"powermean\n\nCalculates the weighted powermean of a series of numbers\n\nCalculates orderth power mean of values, weighted by weights. By default, weights are equal and order is 1, so this is just the arithmetic mean.\n\nArguments:\n\nvalues: values for which to calculate mean\norder[s]: order[s] of power mean\nweights: weights of elements, normalised to 1 inside function\n\nReturns:\n\nweighted power mean(s)\n\n\n\n\n\n","category":"function"},{"location":"","page":"Diversity.jl","title":"Diversity.jl","text":"","category":"page"},{"location":"jost/#Diversity.Jost","page":"Diversity.Jost","title":"Diversity.Jost","text":"","category":"section"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"Lou Jost's diversity measures are found in the Diversity.Jost submodule.","category":"page"},{"location":"jost/#Usage","page":"Diversity.Jost","title":"Usage","text":"","category":"section"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"Accessing the main functionality in the package is simple:","category":"page"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"julia> using Diversity.Jost\n\njulia> ecosystem = [2 2 0; 0 2 2]';\n\njulia> ecosystem = ecosystem ./ sum(ecosystem);\n\njulia> diversities = jostbeta(ecosystem, [0, 1, 2])\n3×8 DataFrame\n Row │ div_type  measure   q      type_level  type_name  partition_level  partition_name  diversity \n     │ String    String    Int64  String      String     String           String          Float64   \n─────┼──────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Unique    JostBeta      0  types                  metacommunity                      1.5\n   2 │ Unique    JostBeta      1  types                  metacommunity                      1.41421\n   3 │ Unique    JostBeta      2  types                  metacommunity                      1.33333","category":"page"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"","category":"page"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"Modules = [Diversity.Jost]\nPrivate = false","category":"page"},{"location":"jost/#Diversity.Jost","page":"Diversity.Jost","title":"Diversity.Jost","text":"Diversity.Jost submodule\n\nLou Jost's diversity measures are found in the Diversity.Jost module.\n\n\n\n\n\n","category":"module"},{"location":"jost/#Diversity.Jost.jostalpha-Tuple{AbstractMatrix, Any}","page":"Diversity.Jost","title":"Diversity.Jost.jostalpha","text":"jostalpha(proportions::AbstractMatrix, qs)\n\nCalculates Jost's alpha diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive-community ecosystem diversity divided by the naive-community beta diversity.\n\nArguments:\n\nproportions relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\nqs single number or vector of orders of diversity measurement\n\nReturns:\n\nDataFrame of diversities\n\n\n\n\n\n","category":"method"},{"location":"jost/#Diversity.Jost.jostbeta-Tuple{AbstractMatrix, Any}","page":"Diversity.Jost","title":"Diversity.Jost.jostbeta","text":"jostbeta(proportions::AbstractMatrix, qs)\n\nCalculates Jost's beta diversity of a series of columns representing independent community counts, for a series of orders, repesented as a vector of qs. This is just the naive gamma diversity divided by Jost's alpha diversity\n\nArguments:\n\nproportions relative proportions of different individuals / species               in population (vector, or matrix where columns are               for individual sub-communities)\nqs single number or vector of orders of diversity measurement\n\nReturns:\n\nDataFrame of diversities\n\n\n\n\n\n","category":"method"},{"location":"jost/","page":"Diversity.Jost","title":"Diversity.Jost","text":"","category":"page"},{"location":"phylogenetics/#Phylogenetic-diversity","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"","category":"section"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"When both Diversity and Phylo are loaded, we generate Phylogenetic diversity measures, based on Faith PD and extended by Chao.","category":"page"},{"location":"phylogenetics/#Usage","page":"Phylogenetic diversity","title":"Usage","text":"","category":"section"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"Using the functionality in the package is simple:","category":"page"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"Create a tree (using our Phylo package)\nCreate a PhyloBranches (AbstractTypes subtype) object from it\nCreate a Metacommunity from that\nCalculate diversity!","category":"page"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"julia> using Diversity, Phylo\n\njulia> species = [\"Dog\", \"Cat\", \"Human\", \"Potato\"];\n\njulia> community = [4, 1, 3, 2] ./ 10;\n\njulia> nt = rand(Nonultrametric(species))\nRootedTree with 4 tips, 7 nodes and 6 branches.\nLeaf names are Dog, Human, Potato and Cat\n\njulia> collect(getbranches(nt))\n6-element Vector{LinkBranch{OneRoot, String, Dict{String, Any}, Float64}}:\n LinkBranch 7, from node Node 5 to node Human (length 0.48129057007442144).\n\n LinkBranch 8, from node Node 5 to node Potato (length 0.04547304399403693).\n\n LinkBranch 9, from node Node 6 to node Node 5 (length 0.5257296693452039).\n\n LinkBranch 10, from node Node 6 to node Cat (length 1.2058770065006985).\n\n LinkBranch 11, from node Node 7 to node Dog (length 1.0055430448967724).\n\n LinkBranch 12, from node Node 7 to node Node 6 (length 0.07011899861455448).\n\n\njulia> ph = PhyloBranches(nt);\n\njulia> metaphylo = Metacommunity(community, ph);\n\njulia> leafnames = gettypenames(metaphylo, true)\n4-element Vector{String}:\n \"Dog\"\n \"Human\"\n \"Potato\"\n \"Cat\"\n\njulia> meta_gamma(metaphylo, 0)\n1×8 DataFrame\n│ Row │ div_type            │ measure │ q     │ type_level │ type_name │ partition_level │ partition_name │ diversity │\n│     │ String              │ String  │ Int64 │ String     │ String    │ String          │ String         │ Float64   │\n├─────┼─────────────────────┼─────────┼───────┼────────────┼───────────┼─────────────────┼────────────────┼───────────┤\n│ 1   │ Phylogenetic Branch │ Gamma   │ 0     │ types      │           │ metacommunity   │                │ 3.48192   │","category":"page"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"","category":"page"},{"location":"phylogenetics/","page":"Phylogenetic diversity","title":"Phylogenetic diversity","text":"","category":"page"}]
}
